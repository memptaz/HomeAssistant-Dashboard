##############################
#somme de Riemann
##############################
  - platform: integration
    source: sensor.current_power

    
##############################
#Sensor Saisons 
##############################
#  - platform: season
  
##############################
#Sensor Random 
##############################
  - platform: random
    name: Aléatoire
    minimum: 1  
    maximum: 4

##############################
#Sensor Monitoring 
##############################
  - platform: systemmonitor
    resources:
    - type: network_out
      arg: eth0
    - type: network_in
      arg: eth0
    - type: throughput_network_in
      arg: eth0
    - type: throughput_network_out
      arg: eth0
    - type: disk_use_percent
      arg: /home
    - type: processor_use
    - type: memory_use_percent
    - type: last_boot


    
##############################
#Sensor Templates 
##############################
      
  - platform: template
    sensors:
            
###### DIVERS
      night_state:
        friendly_name: Night State
        value_template: "{% if is_state('sun.sun', 'below_horizon') %}1{% else %}0{% endif %}"
          
      saison:
        friendly_name: saisons en francais          
        value_template: >-
          {% set traduction = {'summer':'Été', 'spring':'Printemps', 'autumn':'Automne', 'winter':'Hiver'}%}
          {% set saison = (states.sensor.season.state ) %}
          {{ traduction[saison] }}
          
      dans_2_heures:
        friendly_name: exemple, dans 2 heures          
        value_template: >-
          {{(as_timestamp(states.input_boolean.lave_linge.last_changed) + (7200)) | timestamp_custom("%Hh%m",true)}}
          
      demain:
        friendly_name: jour de demain          
        value_template: >-
          {% set demain = (as_timestamp(now())+ (86400)) | timestamp_custom("%A",true)
            | replace('Monday', 'Lundi')
            | replace('Tuesday', 'Mardi')
            | replace('Wednesday', 'Mercredi')
            | replace('Thursday', 'Jeudi')
            | replace('Friday', 'Vendredi')
            | replace('Saturday', 'Samedi')
            | replace('Sunday', 'Dimanche') %}
          {{ demain }}
          
###### SOLEIL ET LUNE
      sun_elevation:
        friendly_name: Sun Elevation
        icon_template: mdi:weather-sunny
        unit_of_measurement: "°"
        value_template: >
          {{ state_attr('sun.sun', 'elevation') }}

      lune:
        friendly_name: phases de la lune         
        value_template: >-
          {% set lune = states.sensor.moon_phase.state
            | replace('last_quarter', 'Dernier quartier')
            | replace('new_moon', 'Nouvelle lune')
            | replace('waxing_crescent', 'Premier croissant')
            | replace('first_quarter', 'Premier quartier')
            | replace('waxing_gibbous', 'Gibbeuse croissante')
            | replace('full_moon', 'Pleine lune')
            | replace('waning_gibbous', 'Gibbeuse décroissante')
            | replace('waning_crescent', 'Dernier croissant') %}
          {{ lune }}          
###### UPTIME
      uptime_ha:
        friendly_name: "Dernier démarrage de HA"
        value_template: >-        
          {%- set time = (as_timestamp(now()) - as_timestamp(states.sensor.uptime.last_changed)) | int  %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set minutes = '{}min'.format(minutes) if minutes > 0 else '' %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set hours = '{}h '.format(hours) if hours > 0 else '' %}
          {%- set days = (time // 86400) %}
          {%- set days = '{}j '.format(days) if days > 0 else '' %}
          {{ '- de 1min' if time < 60 else days + hours + minutes }} 
        
###### MONITEUR QUALITE AIR
      qualite_air_pourcentage:
        friendly_name: "Qualité de l'air en %"
        value_template: "{{ (100) - ((states.sensor.moniteur_qualite_air.state|float(0)*100/5500)|float|round(2)|float(0))|float|round(1) }}" 
        unit_of_measurement: "%"
        
###### ECHOS ALEXA     
      last_alexa:
        friendly_name: "Dernier echo appelé"
        value_template: "{{ expand('group.echos') | selectattr('attributes.last_called','eq',True) | map(attribute='entity_id') | first }}"       
       

###### HEURE ET DATE
      heure:
        friendly_name: "heure"
        value_template: >-
          {{now().hour }}h{{now().minute }} 

      date_numero:
        friendly_name: "date numéro"
        value_template: >-
          {{now().day }}        

      date_jour:
        friendly_name: "date jour"
        value_template: >-
          {% set days = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche"]  %}
          {{ days[now().weekday()] }}

      date_jour_court:
        friendly_name: "date jour court"
        value_template: >-
          {% set days = ["L.", "M.", "Me.", "J.", "V.", "S.", "D."]  %}
          {{ days[now().weekday()] }}
          
      date_mois:
        entity_id: sensor.date
        friendly_name: "date mois"
        icon_template: mdi:calendar-today
        value_template: >
          {% set months = ["Janvier", "Fevrier", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Decembre"] %}
          {{  months[now().month-1] }}  
 
      date_mois_court:
        entity_id: sensor.date
        friendly_name: "date mois"
        icon_template: mdi:calendar-today
        value_template: >
          {% set months = ["Janv", "Fev", "Mars", "Avr", "Mai", "Juin", "Jui", "Août", "Sept", "Oct", "Nov", "Déc"] %}
          {{  months[now().month-1] }}  
          
      date_simple:
        entity_id: sensor.date
        friendly_name: "Date du jour"
        icon_template: mdi:calendar-today
        value_template: >
          {% set months = ["Janvier", "Fevrier", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"] %}
          {% set days = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche"]  %}
          {{ days[now().weekday()] + ' ' + now().day | string + ' ' + months[now().month-1] }}
          
      date_simple_v2:
        entity_id: sensor.date
        friendly_name: "Date du jour sans le nom du jour"
        icon_template: mdi:calendar-today
        value_template: >
          {% set months = ["Janvier", "Fevrier", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Decembre"] %}
          {{  now().day | string + ' ' + months[now().month-1] }}    
          
      date_annee:
        friendly_name: "date année"
        value_template: >-
          {{ now().year }}

      date_court:
        friendly_name: "date année"
        value_template: >-
          {{ states.sensor.date_jour_court.state }} {{ states.sensor.date_numero.state }} {{ states.sensor.date_mois_court.state }} 
          
###### METEO
      weather_temperature:
        friendly_name: "Weather Température"
        value_template: >-          
          {% if states.weather.ta_ville.state == "unavailable" -%}
            {{ state_attr('weather.maison' , 'temperature') }}
          {% else -%}
            {{ state_attr('weather.ta_ville' , 'temperature') }}
          {% endif -%} 
      weather_temperature_v2:
        friendly_name: "Weather Température"
        value_template: >-          
          {% if states.weather.ta_ville.state == "unavailable" -%}
            {{ state_attr('weather.maison' , 'temperature') }}
          {% else -%}
            {{ state_attr('weather.ta_ville' , 'temperature') }}
          {% endif -%} 
      weather_humidite:
        friendly_name: "Weather Humidité"
        value_template: "{{ state_attr('weather.ta_ville' , 'humidity') }}%"  
      weather_alert_inondation:
        friendly_name: "Alerte Inondation"
        value_template: "{{ state_attr('sensor.49_weather_alert' , 'Inondation') }}"
      weather_alert_grand_froid:
        friendly_name: "Alerte Grand-froid"
        value_template: "{{ state_attr('sensor.49_weather_alert' , 'Grand-froid') }}"
      weather_alert_orages:
        friendly_name: "Alerte Orages"
        value_template: "{{ state_attr('sensor.49_weather_alert' , 'Orages') }}"
      weather_alert_pluie_inondation:
        friendly_name: "Alerte Pluie-inondation"
        value_template: "{{ state_attr('sensor.49_weather_alert' , 'Pluie-inondation') }}"
      weather_alert_vent_violent:
        friendly_name: "Alerte Vent violent"
        value_template: "{{ state_attr('sensor.49_weather_alert' , 'Vent violent') }}"       
      weather_alert_neige_verglas:
        friendly_name: "Alerte Neige-verglas"
        value_template: "{{ state_attr('sensor.49_weather_alert' , 'Neige-verglas') }}"
      weather_alert_canicule:
        friendly_name: "Alerte Canicule"
        value_template: "{{ state_attr('sensor.49_weather_alert' , 'Canicule') }}"        
          
      weather_conditions:
        value_template: >-
          {% set meteo = states('weather.ta_ville') %}
          {% set traduction = {'cloudy':'Nuageux', 'rainy':'Pluvieux', 'partlycloudy':'Partiellement nuageux', 'clear-night':'Nuit claire', 'fog':'Brouillard', 'hail':'Grêle', 'lightning-rainy':'Pluie orageuse', 'lightning':'Orages', 'pouring':'Fortes pluies', 'snowy-rainy':'Neigeux', 'snowy':'Neigeux', 'sunny':'Ensoleillé', 'windy-variant':'Venteux', 'windy':'Venteux', 'exceptional':'Exceptionel'}%}
          {% if not state_attr('weather.maison', 'temperature') == 'Indisponible' -%}
            {% if states('weather.ta_ville') == 'lightning-rainy' -%}
              Pluies orageuses
            {% elif states.sensor.ta_ville_rain_chance_2.state | float > 0 -%}
              {{ traduction[meteo] }}
            {% else -%}
              {{ traduction[meteo] }}
            {% endif -%}
          {% else -%}
            Pas d'info
          {% endif -%} 

      weather_conditions_pluie:
        value_template: >-          
          {% set precip = states('sensor.ta_ville_rain_chance_2') | round %}
          {% if states.sensor.ta_ville_rain_chance_2.state | float > 0 -%}
           {{ precip }}
          {% else -%}
           {{ precip }}
          {% endif -%}    
          
      weather_conditions_neige:
        value_template: >-          
          {% set snow = states('sensor.ta_ville_snow_chance_2') | round %}
          {% if states.sensor.ta_ville_snow_chance_2.state | float > 0 -%}
            {{ snow }}
          {% else -%}
            {{ snow }}
          {% endif -%}  
          
      weather_conditions_ciel:
        value_template: >-        
          {% set ciel = states('sensor.ta_ville_cloud_cover') | round -%}
          {% if states.sensor.ta_ville_cloud_cover.state | float > 10 -%}
            {{ ciel }}
          {% else -%}
           {{ ciel }}
          {% endif -%}          

      weather_vent:
        friendly_name: "Weather vent"
        value_template: 
          "{{ state_attr('weather.ta_ville' , 'wind_speed') }}"

      weather_conditions_vent:
        value_template: >-        
          {% set vent = states('sensor.weather_vent') | round -%}
          {% if states.sensor.weather_vent.state | float > 20 -%}
            {{ vent }}
          {% else -%}
            {{ vent }}
          {% endif -%}
          
      weather_conditions_uv:
        value_template: >-        
          {% set uv = states('sensor.ta_ville_uv_2') | round -%}
          {% if states.sensor.ta_ville_uv_2.state | float > 5 -%}
            {{ uv }}
          {% else -%}
            {{ uv }}
          {% endif -%}  
          
      weather_alerte_couleur_v2:
        friendly_name: Alerte météo sans couleur
        value_template: >-
          {% if is_state("sensor.49_weather_alert", "Jaune") -%}
             Vigilance Jaune  
          {% elif is_state("sensor.49_weather_alert", "Orange") -%}
             Vigilance Orange 
          {% elif is_state("sensor.49_weather_alert", "Rouge") -%}
             Vigilance Rouge 
          {% elif is_state("sensor.49_weather_alert", "Vert") -%}
             Aucune vigilance en cours
          {%- endif %}          
        
      weather_alerte:
        friendly_name: Alerte météo
        value_template: >-
          {% if is_state("sensor.49_weather_alert", "Vert") -%}
          Aucune
          {%- endif %} 
          {% if not is_state("sensor.49_weather_alert", "Vert") -%}
          {%- endif %} 
          {% if is_state("sensor.weather_alert_grand_froid", "Jaune") -%} 
          Froid {%- endif %}  
          {% if is_state("sensor.weather_alert_canicule", "Jaune") -%} 
          Canicule {%- endif %} 
          {% if is_state("sensor.weather_alert_neige_verglas", "Jaune") -%} 
          Neige / Verglas{%- endif %}  
          {% if is_state("sensor.weather_alert_inondation", "Jaune") -%} 
          Inondation{%- endif %}  
          {% if is_state("sensor.weather_alert_orages", "Jaune") -%} 
          Orages{%- endif %}  
          {% if is_state("sensor.weather_alert_vent_violent", "Jaune") -%} 
          Vent{%- endif %}  
          {% if is_state("sensor.weather_alert_pluie_inondation", "Jaune") -%} 
          Pluie / Inondation{%- endif %}
          {% if is_state("sensor.weather_alert_grand_froid", "Orange") -%} 
          Froid {%- endif %}
          {% if is_state("sensor.weather_alert_canicule", "Orange") -%} 
          Canicule {%- endif %}
          {% if is_state("sensor.weather_alert_neige_verglas", "Orange") -%} 
          Neige / Verglas{%- endif %}  
          {% if is_state("sensor.weather_alert_inondation", "Orange") -%} 
          Inondation{%- endif %}  
          {% if is_state("sensor.weather_alert_orages", "Orange") -%} 
          Orages{%- endif %}  
          {% if is_state("sensor.weather_alert_vent_violent", "Orange") -%} 
          Vent{%- endif %}  
          {% if is_state("sensor.weather_alert_pluie_inondation", "Orange") -%} 
          Pluie / Inondation{%- endif %}
          {% if is_state("sensor.weather_alert_grand_froid", "Rouge") -%} 
          Froid {%- endif %}  
          {% if is_state("sensor.weather_alert_canicule", "Rouge") -%} 
          Canicule {%- endif %}  
          {% if is_state("sensor.weather_alert_neige_verglas", "Rouge") -%} 
          Neige / Verglas{%- endif %}  
          {% if is_state("sensor.weather_alert_inondation", "Rouge") -%} 
          Inondation{%- endif %}  
          {% if is_state("sensor.weather_alert_orages", "Rouge") -%} 
          Orages{%- endif %}  
          {% if is_state("sensor.weather_alert_vent_violent", "Rouge") -%} 
          Vent{%- endif %}  
          {% if is_state("sensor.weather_alert_pluie_inondation", "Rouge") -%} 
          Pluie / Inondation{%- endif %}

      weather_alerte2:
        friendly_name: Alerte météo
        value_template: >-
          Alerte météo {{states('sensor.49_weather_alert')}} en cours:
            {%- for attribut in ['Vent violent', 'Pluie-inondation', 'Orages', 'Inondation', 'Pluie-inondation', 'Neige-verglas','Canicule', 'Grand-froid', 'Avalanches', 'Vagues-submersion'] %} 
            {%- if state_attr('sensor.49_weather_alert', attribut) == 'Vert' and state_attr('sensor.49_weather_alert', attribut) != None -%}    
            - {{attribut}} : {{state_attr('sensor.49_weather_alert', attribut)}}{{"\n"}}
            {%- endif -%}
            {% endfor %}
          
      weather_soleil:
        friendly_name: Soleil levé couché         
        value_template: >-
          {% if is_state("sun.sun", "above_horizon") -%}
            {{ as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom("%-Hh%M") }}
          {% else %}
            {{ as_timestamp(states.sun.sun.attributes.next_rising) | timestamp_custom("%-Hh%M") }} 
          {% endif %}

      weather_leve_soleil:
        friendly_name: Soleil levé           
        value_template: >-
            {{ as_timestamp(states.sun.sun.attributes.next_rising) | timestamp_custom("%-Hh%M") }}  
 
      weather_couche_soleil:
        friendly_name: Soleil couché           
        value_template: >-
            {{ as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom("%-Hh%M") }} 
        
      weather_temp_max:
        friendly_name: Température max du jour
        value_template: "{{ states.weather.maison.attributes.forecast[0].temperature|float|round(2) }}"  
        
      weather_temp_min:
        friendly_name: Température min du jour
        value_template: "{{ states.weather.maison.attributes.forecast[0].templow|float|round(0) }}"  
        
        
###### BONJOUR MESSAGE
      bonjour:
        friendly_name: Bonjour
        value_template: >-           
          {% if is_state("sun.sun", "above_horizon") -%}
            {% set heure = states('sensor.time') %}
            {% if heure >= '05:00' and heure <= '11:45' -%}
                  Bonne matinée 
            {% elif heure > '11:45' and heure < '13:30' -%}
                Bon appétit
            {% elif heure >= '13:30' and heure < '19:00' -%}
                Bon après-midi 
            {% elif  heure >= '19:00' and heure < '23:00' -%}
                 Bonsoir    
            {% elif  heure >= '23:00'  -%}
                 Bonne nuit 
            {% elif  heure < '04:00'  -%}
                 Bonne nuit
            {% else %}
              Salut 
            {% endif %}
          {% elif is_state("sun.sun", "below_horizon") -%}
            {% set heure = states('sensor.time') %}
            {% if heure >= '05:00' and heure <= '11:45' -%}
                 Bonne matinée 
            {% elif heure > '11:45' and heure < '13:30' -%}
                Bon appétit 
            {% elif heure >= '13:30' and heure < '18:00' -%}
                Bon après-midi 
            {% elif  heure >= '18:00' and heure < '23:00' -%}
                Bonne soirée   
            {% elif  heure >= '23:00'  -%}
                 Bonne nuit
            {% elif  heure < '05:00'  -%}
                Bonne nuit
            {% else %}
               Salut
            {% endif %}
          {% endif %}

###### CALENDRIERS IOS 

      calendar_calendrier_message:
        friendly_name: calendar.calendrier message
        value_template: "{{ state_attr('calendar.calendrier_calendrier' , 'message') }}"
      calendar_calendrier_heure:
        friendly_name: calendar.calendrier heure
        value_template: "{{ state_attr('calendar.calendrier_calendrier' , 'start_time') }}" 
      calendar_calendrier_heure_formatee:
        friendly_name: calendar.calendrier heure formatee
        value_template: "{{as_timestamp(states('sensor.calendar_calendrier_heure')) | timestamp_custom('%-Hh%M', 'true') }}"        
      calendar_calendrier:
        friendly_name: calendar.calendrier 
        value_template: >- 
          {% if not is_state("sensor.calendar_calendrier_message", "unknown") -%} 
            <font color='lightgrey'> {{ states('sensor.calendar_calendrier_heure_formatee') }} : {{ states('sensor.calendar_calendrier_message') }}
          {% endif -%} 

      calendar_famille_message:
        friendly_name: calendar.famille message
        value_template: "{{ state_attr('calendar.famille_famille' , 'message') }}"
      calendar_famille_heure_debut:
        friendly_name: calendar.famille heure début
        value_template: "{{ state_attr('calendar.famille_famille' , 'start_time') }}" 
      calendar_famille_heure_fin:
        friendly_name: calendar.famille heure fin
        value_template: "{{ state_attr('calendar.famille_famille' , 'end_time') }}" 
      calendar_famille_heure_debut_formatee:
        friendly_name: calendar.famille heure début formatee
        value_template: "{{as_timestamp(states('sensor.calendar_famille_heure_debut')) | timestamp_custom('%-Hh%M', 'true') }}"
      calendar_famille_heure_fin_formatee:
        friendly_name: calendar.famille heure fin formatee
        value_template: "{{as_timestamp(states('sensor.calendar_famille_heure_fin')) | timestamp_custom('%-Hh%M', 'true') }}"  
      calendar_famille:
        friendly_name: calendar.famille 
        value_template: >- 
          {% if not is_state("sensor.calendar_famille_message", "unknown") -%} 
            {{ states('sensor.calendar_famille_heure_debut_formatee') }} - {{ states('sensor.calendar_famille_heure_fin_formatee') }} : {{ states('sensor.calendar_famille_message') }}
          {% else -%}  
            Aucun évènement
          {% endif -%} 
          
      calendar_poubelles_message:
        friendly_name: calendar.poubelle message
        value_template: "{{ state_attr('calendar.poubelles_poubelles' , 'message') }}"
      calendar_poubelles_heure:
        friendly_name: calendar.poubelle heure
        value_template: "{{ state_attr('calendar.poubelles_poubelles' , 'start_time') }}" 
      calendar_poubelles_heure_formatee:
        friendly_name: calendar.poubelles heure formatee
        value_template: "{{as_timestamp(states('sensor.calendar_poubelles_heure')) | timestamp_custom('%-Hh%M', 'true') }}"        
      calendar_poubelles:
        friendly_name: calendar.poubelles 
        value_template: >- 
          {% if not is_state("sensor.calendar_poubelles_message", "unknown") -%} 
            {% if is_state("sensor.calendar_calendrier_message", "unknown") and is_state("sensor.calendar_famille_message", "unknown") -%}
            {{ states('sensor.calendar_poubelles_message') }}
            {%- else -%}
            {{ states('sensor.calendar_poubelles_message') }}
            {% endif -%}
          {%- else -%}
            Aucun rappel
          {% endif -%}

###### ANNIVERSAIRES
      anniversaire:
        friendly_name: Anniversaire
        value_template: >-    
          {% if is_state("sensor.date_simple_v2", "22 Mars") -%}
          {% set age  = states.sensor.date_annee.state | int - 1975 %}
              Alex ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "9 Fevrier") -%}
          {% set age  = states.sensor.date_annee.state | int - 1987 %}
             Anne ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "6 Mars") -%}
          {% set age  = states.sensor.date_annee.state | int - 1973 %}
             Yvan ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "25 Mars") -%}
          {% set age  = states.sensor.date_annee.state | int - 1989 %}
             Charlène ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "10 Mai") -%}
          {% set age  = states.sensor.date_annee.state | int - 1930 %}
               Mamie Janine ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "30 Mai") -%}
          {% set age1  = states.sensor.date_annee.state | int - 2010 %}
          {% set age2  = states.sensor.date_annee.state | int - 1952 %}
             Manon ({{ age1 }} ans) et Monique ({{ age2 }} ans)
          {% elif is_state("sensor.date_simple_v2", "14 Juin") -%}
          {% set age  = states.sensor.date_annee.state | int - 1955 %}
             Marco ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "29 Juin") -%}
          {% set age  = states.sensor.date_annee.state | int - 1971 %}
             Monika ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "30 Juin") -%}
          {% set age  = states.sensor.date_annee.state | int - 1980 %}
             Aurel ({{ age }} ans) 
          {% elif is_state("sensor.date_simple_v2", "14 Juillet") -%}
          {% set age  = states.sensor.date_annee.state | int - 1952 %}
             Luc ({{ age }} ans) 
          {% elif is_state("sensor.date_simple_v2", "31 Juillet") -%}
          {% set age  = states.sensor.date_annee.state | int - 2011 %}
             Léane ({{ age }} ans) et Mamé 
          {% elif is_state("sensor.date_simple_v2", "23 Octobre") -%}
          {% set age  = states.sensor.date_annee.state | int - 2007 %}
             Tom ({{ age }} ans) 
          {% elif is_state("sensor.date_simple_v2", "29 Octobre") -%}
          {% set age  = states.sensor.date_annee.state | int - 2001 %}
             Grégoire ({{ age }} ans) 
          {% elif is_state("sensor.date_simple_v2", "31 Ocotobre") -%}
          {% set age  = states.sensor.date_annee.state | int - 1993 %}
             Antoine ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "10 Décembre") -%}
          {% set age  = states.sensor.date_annee.state | int - 1952 %}
             Suzie ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "27 Décembre") -%}
          {% set age  = states.sensor.date_annee.state | int - 1988 %}
             Kevin ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "8 Janvier") -%}
          {% set age  = states.sensor.date_annee.state | int - 2013 %}
             Nina  ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "1 Janvier") -%}
            Bonne année !
          {% elif is_state("sensor.date_simple_v2", "13 Janvier") -%}
          {% set age  = states.sensor.date_annee.state | int - 1987 %}
             Maxime ({{ age }} ans) 
          {% elif is_state("sensor.date_simple_v2", "29 Janvier") -%}
          {% set age  = states.sensor.date_annee.state | int - 1964 %}
             Nadège ({{ age }} ans) 
          {% else %}
            Aucun
          {%- endif %}
          
###### THERMOMETRES TEMPERATURES HUMIDITE

      temp_maison:
        friendly_name: "Tempertaures moyennes de la maison"
        unit_of_measurement: "°C"
        value_template: >-
          {{ ((float(states.sensor.temp_moyenne_rdc.state)  + float(states.sensor.temp_moyenne_etage.state)) / 2) | round(1) }}
          
      temp_moyenne_rdc:
        friendly_name: "Tempertaure moyenne du rdc"
        unit_of_measurement: "°C"
        value_template: >-
          {{ ((float(states.sensor.temp_sejour.state)  + float(states.sensor.temp_couloir_rdc.state)) / 2) | round(1) }}

      hum_moyenne_rdc:
        friendly_name: "Humidité moyenne du rdc"
        unit_of_measurement: "%"
        icon_template: mdi:water
        value_template: >-
          {{ ((float(states.sensor.hum_sejour.state)  + float(states.sensor.hum_couloir_rdc.state)) / 2) | round(1) }}
          
      temp_moyenne_etage:
        friendly_name: "Tempertaure moyenne etage"
        unit_of_measurement: "°C"
        value_template: >-
          {{ ((float(states.sensor.temp_tom.state)  + float(states.sensor.temp_nina.state) + float(states.sensor.temp_manon.state)) / 3) | round(1) }}
          
      temp_sejour_arrondie:
        friendly_name: "Tempertaure arrondie du séjour"
        unit_of_measurement: "°C"
        value_template: >-
          {{ float(states.sensor.temp_sejour.state) | round(1) }} 

      hum_sejour_arrondie:
        friendly_name: "Humidité arrondie du séjour"
        unit_of_measurement: "%"
        icon_template: mdi:water
        value_template: >-
          {{ float(states.sensor.hum_sejour.state) | round(1) }} 
          
      temp_couloir_arrondie:
        friendly_name: "Tempertaure arrondie du couloir"
        unit_of_measurement: "°C"
        value_template: >-
          {{ float(states.sensor.temp_couloir_rdc.state) | round(1) }} 

      hum_couloir_arrondie:
        friendly_name: "Humidité arrondie du couloir"
        unit_of_measurement: "%"
        icon_template: mdi:water
        value_template: >-
          {{ float(states.sensor.hum_couloir_rdc.state) | round(1) }} 
          
      temp_cuisine_arrondie:
        friendly_name: "Tempertaure arrondie de la cuisine"
        unit_of_measurement: "°C"
        value_template: >-
          {{ float(states.sensor.temp_cuisine.state) | round(1) }} 

      hum_cuisine_arrondie:
        friendly_name: "Humidité arrondie de la cuisine"
        unit_of_measurement: "%"
        icon_template: mdi:water
        value_template: >-
          {{ float(states.sensor.hum_cuisine.state) | round(1) }} 
          
      temp_parents_arrondie:
        friendly_name: "Tempertaure arrondie de la chambre parentale"
        unit_of_measurement: "°C"
        value_template: >-
          {{ float(states.sensor.temp_parents.state) | round(1) }} 

      hum_parents_arrondie:
        friendly_name: "Humidité arrondie de la chambre parentale"
        unit_of_measurement: "%"
        icon_template: mdi:water
        value_template: >-
          {{ float(states.sensor.hum_parents.state) | round(1) }} 
          
      temp_tom_arrondie:
        friendly_name: "Tempertaure arrondie de la chambre de Tom"
        unit_of_measurement: "°C"
        value_template: >-
          {{ float(states.sensor.temp_tom.state) | round(1) }} 

      hum_tom_arrondie:
        friendly_name: "Humidité arrondie de la chambre de Tom"
        unit_of_measurement: "%"
        icon_template: mdi:water
        value_template: >-
          {{ float(states.sensor.hum_tom.state) | round(1) }} 
          
      temp_manon_arrondie:
        friendly_name: "Tempertaure arrondie de la chambre de Manon et Léane"
        unit_of_measurement: "°C"
        value_template: >-
          {{ float(states.sensor.temp_manon.state) | round(1) }}

      hum_manon_arrondie:
        friendly_name: "Humidité arrondie de la chambre de Manon"
        unit_of_measurement: "%"
        icon_template: mdi:water
        value_template: >-
          {{ float(states.sensor.hum_manon.state) | round(1) }} 
          
      temp_nina_arrondie:
        friendly_name: "Tempertaure arrondie de la chambre de Nina"
        unit_of_measurement: "°C"
        value_template: >-
          {{ float(states.sensor.temp_nina.state) | round(1) }}

      hum_nina_arrondie:
        friendly_name: "Humidité arrondie de la chambre de Nina"
        unit_of_measurement: "%"
        icon_template: mdi:water
        value_template: >-
          {{ float(states.sensor.hum_nina.state) | round(1) }} 

      compteur_thermo_hs:
        friendly_name: Compteur thermo indisponible          
        value_template: >-
            {{states                                  
            | reject('in', ['undefined', 'off'])
            | selectattr('entity_id', 'in', state_attr('group.thermo', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | count}}
          
      thermo_hs:
        friendly_name: thermo indisponible          
        value_template: >-
            {{states                                  
            | reject('in', ['undefined', 'off'])
            | selectattr('entity_id', 'in', state_attr('group.thermo', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | join(' , ')}}
            

###### PRESENTS A LA MAISON

      appareils_connectes_v2:
        friendly_name: Appareils connectés        
        value_template: >-
         {%- if states.group.connectes.state == "home"  -%}
           {% set connectes = states | selectattr('entity_id', 'in', state_attr('group.connectes','entity_id')) | selectattr('state','in',['','home']) | map(attribute='name') | list %}
           {%- if connectes | length == 1 -%} 
           {{ connectes[0] }}
           {%- elif connectes | length > 1 -%}
           {{ connectes[:-1] | join(' , ') }} {{'' if connectes | length == 2 else ' '}}et {{ connectes[-1]}}
           {%- else -%}
           {%- endif -%}
         {%- else -%}
          Aucun
         {%- endif -%}

      appareils_connectes:
        friendly_name: Appareils connectés        
        value_template: >-         
         {%- if states.group.connectes.state == "home"  -%}
         {%- set Aurel = states.device_tracker.macbook_aurel.state == "home" or  states.device_tracker.ipad_aurel_ha.state == "home"  %}
         {%- set Alex = states.device_tracker.macbook_alex.state == "home" or  states.device_tracker.liseuse_alex.state == "home"  %}
         {%- set Tom = states.device_tracker.macbook_air_de_tom.state == "home"  %}
         {%- set Manon = states.device_tracker.tablette_manon.state == "home"  %}
         {%- set Leane = states.device_tracker.leane_tab_ping.state == "home"  %}
         {%- set Nina = states.device_tracker.tab_nina.state == "home"  %}
           {%- if Aurel == True  -%}
             Aurel {% if Alex == True or Tom == True or Manon == True or Leane == True or Nina == True -%} - {% endif -%}
           {%- endif -%}
           {%- if Alex == True  -%}
             Alex {% if Tom == True or Manon == True or Leane == True or Nina == True -%} - {% endif -%}
           {%- endif -%} 
           {%- if Tom == True  -%}
             Tom {% if Manon == True or Leane == True or Nina == True -%} - {% endif -%}
           {%- endif -%}  
           {%- if Manon == True  -%}
             Manon {% if Leane == True or Nina == True -%} - {% endif -%}
           {%- endif -%}  
           {%- if Leane == True  -%}
             Leane {% if Nina == True -%} - {% endif -%}
           {%- endif -%}  
           {%- if Nina == True  -%}
             Nina 
           {%- endif -%}            
         {%- else -%}
          Aucun
         {%- endif -%}
         
      enfant_presence:
        friendly_name: Enfants présents          
        value_template: >-
         {%- if states.group.enfants.state == "home"  -%}
           {% set porte_on = states | selectattr('entity_id', 'in', state_attr('group.enfants','entity_id')) | selectattr('state','in',['','home']) | map(attribute='name') | list %}
           {%- if porte_on | length == 1 -%} 
           {{ porte_on[0] }}
           {%- else -%}
           {{ porte_on[:-1] | join(', ') }}{{', ' if porte_on | length > 2 else ' '}}et {{ porte_on[-1]}}
           {%- endif -%}
         {%- else -%}
          Aucun
         {%- endif -%} 

###### BOITE AUX LETTRES          
      boite_aux_lettres_ouvertee:
        friendly_name: boite aux lettres ouverte à          
        value_template: >-
          {{ as_timestamp(states.input_boolean.boite_aux_lettres_ouverte.last_changed) | timestamp_custom("%-Hh%M") }}
          
      courrier_releve:
        friendly_name: courrier relevé à          
        value_template: >-
          {{ as_timestamp(states.input_boolean.courrier_releve.last_changed) | timestamp_custom("%-Hh%M") }}

###### APPAREILS CHARGES
      appareils_charges:
        friendly_name: Appareils chargés          
        value_template: >-
         {% set charge = states | selectattr('entity_id', 'in', state_attr('group.appareils_charges','entity_id')) | selectattr('state','in',['','Full']) | map(attribute='name') | list %}
         {% if charge | length == 1 %} 
         {{ charge[0] }} 
         {% elif charge | length > 1 %}
         {{ charge[:-1] | join(' , ') }}{{' ,' if charge | length > 2 else ' '}} et {{ charge[-1]}} 
         {% else %}
         {% endif %}
         
###### SERRURES         
      compteur_connecte:
        friendly_name: Compteur appareils connectés          
        value_template: >-
            {{states                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('group.connectes', 'entity_id'))|selectattr('state', 'equalto', 'home')
            | map(attribute='name') | list | count}}            

      compteur_serrures:
        friendly_name: Compteur serrures ouvertes          
        value_template: >-
            {{states                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('group.serrures', 'entity_id'))|selectattr('state', 'equalto', 'unlocked')
            | map(attribute='name') | list | count}} 
            
      serrure_ouverte:
        friendly_name: serrures ouvertes          
        value_template: >-
          {% if states.group.serrures.state == "unlocked" -%}
           {% set lock = states | selectattr('entity_id', 'in', state_attr('group.serrures','entity_id')) | selectattr('state','in',['','unlocked']) | map(attribute='name') | list %}
           {%- if lock | length == 1 -%} 
           {{ lock[0] }}
           {%- else -%}
           {{ lock[:-1] | join(', ') }}{{', ' if lock | length > 2 else ' '}}et {{ lock[-1]}}
           {%- endif -%}
          {%- else -%}
           Fermées
          {%- endif -%}  
            
      serrure_bloquee:
        friendly_name: serrures bloquées          
        value_template: >-
            {{states                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('group.serrures', 'entity_id'))|selectattr('state', 'equalto', 'jammed')
            | map(attribute='name') | list | join(' , ')  }} 
            
###### MODES   
      compteur_modes:
        friendly_name: Compteur modes         
        value_template: >
            {{states                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('group.mode', 'entity_id'))|selectattr('state', 'equalto', 'on')
            | map(attribute='name') | list | count}}
          
      modes:
        friendly_name: Modes en cours
        value_template: >-      
         {%- if states.group.mode.state == "on"  -%}
           {% set mode_on = states | selectattr('entity_id', 'in', state_attr('group.mode','entity_id')) | selectattr('state','in',['','on']) | map(attribute='name') | list %}
           {%- if mode_on | length == 1 -%} 
           {{ mode_on[0] }}
           {%- elif mode_on | length > 1 -%}
           {{ mode_on[:-1] | join(' , ') }} {{'' if mode_on | length == 2 else ' '}}et {{ mode_on[-1]}}
           {%- else -%}
           {%- endif -%}
         {%- else -%}
          Aucun
         {%- endif -%}

###### PRESENCES FP2
      compteur_presence_sejour:
        friendly_name: Compteur présence sejour         
        value_template: >-
            {{states                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('group.presence_sejour', 'entity_id'))|selectattr('state', 'equalto', 'on')
            | map(attribute='name') | list | count}}
###### NOEL          
      compteur_noel:
        friendly_name: Compteur Noel          
        value_template: >-
            {{states                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('group.noel', 'entity_id'))|selectattr('state', 'equalto', 'on')
            | map(attribute='name') | list | count}} 

      compteur_noel_hs:
        friendly_name: Compteur Noel HS        
        value_template: >-
            {{states                                  
            | selectattr('entity_id', 'in', state_attr('group.noel', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | count}}

      noel_hs:
        friendly_name: noel indisponible          
        value_template: >-
            {{states                                  
            | reject('in', ['undefined', 'off'])
            | selectattr('entity_id', 'in', state_attr('group.noel', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | join(' , ')}}          
          
          
###### REVEILS ALEXA

      verif_reveils_cours:
        friendly_name: Verifier si réveils ou cours         
        value_template: >-
            {%- set reveil_tom = not is_state('sensor.tom_reveil', 'Grasse mat !')  -%}
            {%- set reveil_manon = not is_state('sensor.manon_reveil', 'Grasse mat !') -%}
            {%- set reveil_leane = not is_state('sensor.leane_reveil', 'Grasse mat !') -%}
            {%- set reveil_nina = not is_state('sensor.nina_reveil', 'Grasse mat !')  -%}  
            {%- set tom_cours_aujourdhui = states('sensor.debut_des_cours_de_tom_aujourd_hui')  -%} 
            {%- set manon_cours_aujourdhui = states('sensor.debut_des_cours_de_manon_aujourd_hui')  -%}
            {%- set leane_cours_aujourdhui = states('sensor.debut_des_cours_de_leane_aujourd_hui')  -%}
            {%- set tom_cours_demain = states('sensor.debut_des_cours_de_tom_demain')  -%} 
            {%- set manon_cours_demain = states('sensor.debut_des_cours_de_manon_demain')  -%}
            {%- set leane_cours_demain = states('sensor.debut_des_cours_de_leane_demain')  -%}            
            {%- if is_state("input_boolean.reveils", "off")  and tom_cours_aujourdhui == "Pas cours" and manon_cours_aujourdhui == "Pas cours" and leane_cours_aujourdhui == "Pas cours" and tom_cours_demain == "Pas cours" and manon_cours_demain == "Pas cours"  and leane_cours_demain == "Pas cours"-%}            
              off
            {%- else %}
              on 
            {%- endif -%}
            
      reveil:
        friendly_name: Réveils          
        value_template: >-
          {%- if is_state("input_boolean.reveils", "on") -%} 
          {%- set Tom = not is_state('sensor.tom_reveil', 'Grasse mat !')  %}
          {%- set Manon = not is_state('sensor.manon_reveil', 'Grasse mat !') %}
          {%- set Leane = not is_state('sensor.leane_reveil', 'Grasse mat !')  %}
          {%- set Nina = not is_state('sensor.nina_reveil', 'Grasse mat !')  %}          
           {%- if Tom == True  -%}
             Tom {{ states('sensor.tom_reveil') }} {% if Manon == True or Leane == True or Nina == True -%} - {% endif -%}
           {%- endif -%}  
           {%- if Manon == True  -%}
             Manon {{ states('sensor.manon_reveil') }} {% if Leane == True or Nina == True -%} - {% endif -%}
           {%- endif -%}  
           {%- if Leane == True  -%}
             Leane {{ states('sensor.leane_reveil') }} {% if Nina == True -%} - {% endif -%}
           {%- endif -%}  
           {%- if Nina == True  -%}
             Nina {{ states('sensor.nina_reveil') }}
           {%- endif -%}            
          {%- else -%}
             Aucun réveil
          {%- endif %}

      reveil_court:
        friendly_name: Réveils          
        value_template: >-
          {%- if is_state("input_boolean.reveils", "on") -%} 
          {%- set Tom = not is_state('sensor.tom_reveil', 'Grasse mat !')  %}
          {%- set Manon = not is_state('sensor.manon_reveil', 'Grasse mat !') %}
          {%- set Leane = not is_state('sensor.leane_reveil', 'Grasse mat !')  %}
          {%- set Nina = not is_state('sensor.nina_reveil', 'Grasse mat !')  %}          
           {%- if Tom == True  -%}
             Tom {{ states('sensor.tom_reveil_court') }} {% if Manon == True or Leane == True or Nina == True -%} - {% endif -%}
           {%- endif -%}  
           {%- if Manon == True  -%}
             Manon {{ states('sensor.manon_reveil_court') }} {% if Leane == True or Nina == True -%} - {% endif -%}
           {%- endif -%}  
           {%- if Leane == True  -%}
             Leane {{ states('sensor.leane_reveil_court') }} {% if Nina == True -%} - {% endif -%}
           {%- endif -%}  
           {%- if Nina == True  -%}
             Nina {{ states('sensor.nina_reveil_court') }}
           {%- endif -%}            
          {%- else -%}
             Aucun réveil
          {%- endif %}
          
      tom_reveil_annonce:
        friendly_name: Tom Réveil annonce Alexa       
        value_template: >-
          {% if not is_state("sensor.tom_reveil", "Grasse mat !") and is_state("schedule.week_end", "off") -%} 
            Réveil prévu pour {{ states.sensor.tom_reveil.state }}
          {%- endif %}
          
      filles_reveil_annonce:
        friendly_name: Filles Réveil annonce Alexa       
        value_template: >-
          {% if not is_state("sensor.reveil", "Aucun") -%} 
            
          {%- endif %}
          {% if not is_state("sensor.nina_reveil", "Grasse mat !") and is_state("schedule.week_end", "off")-%} 
            Nina, réveil prévu pour {{ states.sensor.nina_reveil.state }}.
          {%- endif %} 
          {% if not is_state("sensor.leane_reveil", "Grasse mat !") and is_state("schedule.week_end", "off")-%} 
            Léane, réveil prévu pour {{ states.sensor.leane_reveil.state }}.
          {%- endif %}
          {% if not is_state("sensor.manon_reveil", "Grasse mat !") and is_state("schedule.week_end", "off")-%} 
            Manon, réveil prévu pour {{ states.sensor.manon_reveil.state }}.
          {%- endif %}          

      tom_reveil:
        friendly_name: Réveil Tom
        value_template: >-
          {% if states('sensor.tom_next_alarm') == 'unknown' %}
            Grasse mat !
          {% else -%}
            {% set reveil = as_timestamp(states('sensor.tom_next_alarm')) | timestamp_custom('%A %Hh%M')
            | replace('Monday', 'Lundi')
            | replace('Tuesday', 'Mardi')
            | replace('Wednesday', 'Mercredi')
            | replace('Thursday', 'Jeudi')
            | replace('Friday', 'Vendredi')
            | replace('Saturday', 'Samedi')
            | replace('Sunday', 'Dimanche') %}
            {{ reveil }}
          {% endif %}
          
      tom_reveil_court:
        friendly_name: Réveil Tom
        value_template: >-
          {% if states('sensor.tom_next_alarm') == 'unknown' %}
            Aucun
          {% else -%}
            {% set reveil = as_timestamp(states('sensor.tom_next_alarm')) | timestamp_custom('%A %Hh%M')
            | replace('Monday', 'L.')
            | replace('Tuesday', 'M.')
            | replace('Wednesday', 'Me.')
            | replace('Thursday', 'J.')
            | replace('Friday', 'V.')
            | replace('Saturday', 'S.')
            | replace('Sunday', 'D.') %}
            {{ reveil }}
          {% endif %}
          
      tom_reveil_date:
        friendly_name: Réveil Tom
        value_template: >-
            {{as_timestamp(states('sensor.tom_next_alarm')) | timestamp_custom('%d/%m') }}
            
      manon_reveil:
        friendly_name: Réveil manon 
        value_template: >-
          {% if states('sensor.manon_next_alarm') == 'unknown' %}
            Grasse mat !
          {% else -%}
            {% set reveil = as_timestamp(states('sensor.manon_next_alarm')) | timestamp_custom('%A %Hh%M')
            | replace('Monday', 'lundi')
            | replace('Tuesday', 'mardi')
            | replace('Wednesday', 'mercredi')
            | replace('Thursday', 'jeudi')
            | replace('Friday', 'vendredi')
            | replace('Saturday', 'samedi')
            | replace('Sunday', 'dimanche') %}
            {{ reveil }}            
          {% endif %}

      manon_reveil_court:
        friendly_name: Réveil manon 
        value_template: >-
          {% if states('sensor.manon_next_alarm') == 'unknown' %}
            Aucun
          {% else -%}
            {% set reveil = as_timestamp(states('sensor.manon_next_alarm')) | timestamp_custom('%A %Hh%M')
            | replace('Monday', 'L.')
            | replace('Tuesday', 'M.')
            | replace('Wednesday', 'Me.')
            | replace('Thursday', 'J.')
            | replace('Friday', 'V.')
            | replace('Saturday', 'S.')
            | replace('Sunday', 'D.') %}
            {{ reveil }}            
          {% endif %}  
          
      leane_reveil:
        friendly_name: Réveil leane 
        value_template: >-
          {% if states('sensor.leane_next_alarm') == 'unknown' %}
            Grasse mat !
          {% else -%}
            {% set reveil = as_timestamp(states('sensor.leane_next_alarm')) | timestamp_custom('%A %Hh%M')
            | replace('Monday', 'lundi')
            | replace('Tuesday', 'mardi')
            | replace('Wednesday', 'mercredi')
            | replace('Thursday', 'jeudi')
            | replace('Friday', 'vendredi')
            | replace('Saturday', 'samedi')
            | replace('Sunday', 'dimanche') %}
            {{ reveil }} 
          {% endif %}

      leane_reveil_court:
        friendly_name: Réveil leane 
        value_template: >-
          {% if states('sensor.leane_next_alarm') == 'unknown' %}
            Aucun
          {% else -%}
            {% set reveil = as_timestamp(states('sensor.leane_next_alarm')) | timestamp_custom('%A %Hh%M')
            | replace('Monday', 'L.')
            | replace('Tuesday', 'M.')
            | replace('Wednesday', 'Me.')
            | replace('Thursday', 'J.')
            | replace('Friday', 'V.')
            | replace('Saturday', 'S.')
            | replace('Sunday', 'D.') %}
            {{ reveil }} 
          {% endif %}
          
      nina_reveil:
        friendly_name: Réveil Nina 
        value_template: >-
          {% if states('sensor.nina_next_alarm') == 'unknown' %}
            Grasse mat !
          {% else -%}
            {% set reveil = as_timestamp(states('sensor.nina_next_alarm')) | timestamp_custom('%A %Hh%M')
            | replace('Monday', 'lundi')
            | replace('Tuesday', 'mardi')
            | replace('Wednesday', 'mercredi')
            | replace('Thursday', 'jeudi')
            | replace('Friday', 'vendredi')
            | replace('Saturday', 'samedi')
            | replace('Sunday', 'dimanche') %}
            {{ reveil }} 
          {% endif %}
 
      nina_reveil_court:
        friendly_name: Réveil Nina 
        value_template: >-
          {% if states('sensor.nina_next_alarm') == 'unknown' %}
            Aucun
          {% else -%}
            {% set reveil = as_timestamp(states('sensor.nina_next_alarm')) | timestamp_custom('%A %Hh%M')
            | replace('Monday', 'L.')
            | replace('Tuesday', 'M.')
            | replace('Wednesday', 'Me.')
            | replace('Thursday', 'J.')
            | replace('Friday', 'V.')
            | replace('Saturday', 'S.')
            | replace('Sunday', 'D.') %}
            {{ reveil }} 
          {% endif %}         
          
          
      compteur_reveil_off:
        friendly_name: Compteur reveil eteint         
        value_template: >-
          {% set rappel = [
           states.sensor.tom_reveil,
           states.sensor.manon_reveil,
           states.sensor.leane_reveil,
           states.sensor.nina_reveil,
           ] %}
          {{ rappel | selectattr('state','eq','Grasse mat !') | list | count }}
         
          
###### MINUTEUR ALEXA
      compteur_minuteur:
        friendly_name: Compteur minuteur          
        value_template: >-
          {% set minuteur = [
           states.sensor.le_bureau_next_timer,
           states.sensor.le_salon_next_timer,
           states.sensor.aurel_s_fire_tv_cube_next_timer,
           states.sensor.la_cuisine_next_timer,
           states.sensor.la_salle_de_bain_next_timer,
           states.sensor.papa_next_timer,
           states.sensor.maman_next_timer,
           states.sensor.tom_next_timer,
           states.sensor.nina_next_timer,
           states.sensor.leane_next_timer,
           states.sensor.manon_next_timer,

           ] %}
          {{ minuteur | selectattr('state','!=','unknown') | list | count }}

      minuteur_bureau:
        friendly_name: Minuteur bureau         
        value_template: >-
          {{ ( as_timestamp(states('sensor.le_bureau_next_timer')) | int - (now().timestamp()) | int ) | timestamp_custom('%H:%M:%S', false) }}
          
      minuteur_salon:
        friendly_name: Minuteur salon         
        value_template: >-
          {{ ( as_timestamp(states('sensor.le_salon_next_timer')) | int - (now().timestamp()) | int ) | timestamp_custom('%H:%M:%S', false) }}
          
      minuteur_fire_tv:
        friendly_name: Minuteur Fire TV         
        value_template: >-
          {{ ( as_timestamp(states('sensor.aurel_s_fire_tv_cube_next_timer')) | int - (now().timestamp()) | int ) | timestamp_custom('%H:%M:%S', false) }}
          
      minuteur_cuisine:
        friendly_name: Minuteur cuisine         
        value_template: >-
          {{ ( as_timestamp(states('sensor.la_cuisine_next_timer')) | int - (now().timestamp()) | int ) | timestamp_custom('%H:%M:%S', false) }}
          
      minuteur_sdb:
        friendly_name: Minuteur sdb         
        value_template: >-
          {{ ( as_timestamp(states('sensor.la_salle_de_bain_next_timer')) | int - (now().timestamp()) | int ) | timestamp_custom('%H:%M:%S', false) }}
          
      minuteur_aurel:
        friendly_name: Minuteur aurel         
        value_template: >-
          {{ ( as_timestamp(states('sensor.papa_next_timer')) | int - (now().timestamp()) | int ) | timestamp_custom('%H:%M:%S', false) }}
          
      minuteur_alex:
        friendly_name: Minuteur alex         
        value_template: >-
          {{ ( as_timestamp(states('sensor.maman_next_timer')) | int - (now().timestamp()) | int ) | timestamp_custom('%H:%M:%S', false) }}
          
      minuteur_tom:
        friendly_name: Minuteur tom         
        value_template: >-
          {{ ( as_timestamp(states('sensor.tom_next_timer')) | int - (now().timestamp()) | int ) | timestamp_custom('%H:%M:%S', false) }}
          
      minuteur_nina:
        friendly_name: Minuteur nina         
        value_template: >-
          {{ ( as_timestamp(states('sensor.nina_next_timer')) | int - (now().timestamp()) | int ) | timestamp_custom('%H:%M:%S', false) }}
          
      minuteur_leane:
        friendly_name: Minuteur leane         
        value_template: >-
          {{ ( as_timestamp(states('sensor.leane_next_timer')) | int - (now().timestamp()) | int ) | timestamp_custom('%H:%M:%S', false) }}
          
      minuteur_manon:
        friendly_name: Minuteur manon         
        value_template: >-
          {{ ( as_timestamp(states('sensor.manon_next_timer')) | int - (now().timestamp()) | int ) | timestamp_custom('%H:%M:%S', false) }}
         
###### RAPPELS ALEXA

      compteur_rappel:
        friendly_name: Compteur rappel         
        value_template: >-
            {{states                                  
            | selectattr('entity_id', 'search', 'reminder') 
            | selectattr('state', '!=', 'unknown')
            | rejectattr('entity_id', 'search', 'sensor.aurel_s_voice_in_a_can_for_ios_next_reminder')
            | rejectattr('entity_id', 'search', 'sensor.aurel_s_voice_in_a_can_for_apple_watch_next_reminder')
            | rejectattr('entity_id', 'search', 'sensor.aurel_s_2nd_voice_in_a_can_for_apple_watch_next_reminder')
            | rejectattr('entity_id', 'search', 'sensor.tv_salon_next_reminder')
            | map(attribute='name') | list | count}}
          
      rappel:
        friendly_name: rappel         
        value_template: >-

            {% if not is_state("sensor.le_bureau_next_reminder", "unknown") -%}  
              Bureau : {{ state_attr('sensor.le_bureau_next_reminder' , 'reminder') }} le {{as_timestamp(states('sensor.le_bureau_next_reminder')) | timestamp_custom("%d/%m à %Hh%M") }} 
            {% endif -%}
            {% if not is_state("sensor.le_salon_next_reminder", "unknown") -%}  
              Salon : {{ state_attr('sensor.le_salon_next_reminder' , 'reminder') }} le {{as_timestamp(states('sensor.le_salon_next_reminder')) | timestamp_custom("%d/%m à %Hh%M") }}  
            {% endif -%}
            {% if not is_state("sensor.la_cuisine_next_reminder", "unknown") -%}  
              Cuisine : {{ state_attr('sensor.la_cuisine_next_reminder' , 'reminder') }} le {{as_timestamp(states('sensor.la_cuisine_next_reminder')) | timestamp_custom("%d/%m à %Hh%M") }}  
            {% endif -%}
            {% if not is_state("sensor.la_salle_de_bain_next_reminder", "unknown") -%}  
              Salle de bains : {{ state_attr('sensor.la_salle_de_bain_next_reminder' , 'reminder') }} le {{as_timestamp(states('sensor.la_salle_de_bain_next_reminder')) | timestamp_custom("%d/%m à %Hh%M") }}  
            {% endif -%}
            {% if not is_state("sensor.papa_next_reminder", "unknown") -%}  
              Aurel : {{ state_attr('sensor.papa_next_reminder' , 'reminder') }} le {{as_timestamp(states('sensor.papa_next_reminder')) | timestamp_custom("%d/%m à %Hh%M") }}  
            {% endif -%}
            {% if not is_state("sensor.maman_next_reminder", "unknown") -%}  
              Alex : {{ state_attr('sensor.maman_next_reminder' , 'reminder') }} le {{as_timestamp(states('sensor.maman_next_reminder')) | timestamp_custom("%d/%m à %Hh%M") }} 
            {% endif -%}
            {% if not is_state("sensor.tom_next_reminder", "unknown") -%}  
              Tom : {{ state_attr('sensor.tom_next_reminder' , 'reminder') }} le {{as_timestamp(states('sensor.tom_next_reminder')) | timestamp_custom("%d/%m à %Hh%M") }}  
            {% endif -%}
            {% if not is_state("sensor.manon_next_reminder", "unknown") -%}  
              Manon : {{ state_attr('sensor.manon_next_reminder' , 'reminder') }} le {{as_timestamp(states('sensor.manon_next_reminder')) | timestamp_custom("%d/%m à %Hh%M") }}  
            {% endif -%}
            {% if not is_state("sensor.leane_next_reminder", "unknown") -%}  
              Léane : {{ state_attr('sensor.leane_next_reminder' , 'reminder') }} le {{as_timestamp(states('sensor.leane_next_reminder')) | timestamp_custom("%d/%m à %Hh%M") }} 
            {% endif -%}
            {% if not is_state("sensor.nina_next_reminder", "unknown") -%}  
              Nina : {{ state_attr('sensor.nina_next_reminder' , 'reminder') }} le {{as_timestamp(states('sensor.nina_next_reminder')) | timestamp_custom("%d/%m à %Hh%M") }} 
            {% endif -%}

          
###### AUTRES HS COMPTEURS ET LISTES

## PLANTES          
      compteur_plante_hs:
        friendly_name: Compteur plante indisponible          
        value_template: >-
            {{states                                  
            | selectattr('entity_id', 'in', state_attr('group.plantes', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | count}}
## ZIGBEE          
      compteur_zigbee_hs:
        friendly_name: Compteur zigbee indisponible          
        value_template: >-
            {{states                              
            | selectattr('entity_id', 'in', state_attr('group.zigbee', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | count }}
            
      zigbee_hs:
        friendly_name: zigbee indisponible          
        value_template: >-
            {{states                              
            | selectattr('entity_id', 'in', state_attr('group.zigbee', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | join(' , ') }}

## CAMERAS
      compteur_camera_hs:
        friendly_name: Compteur camera indisponible          
        value_template: >-
            {{states                                  
            | reject('in', ['undefined', 'off'])
            | selectattr('entity_id', 'in', state_attr('group.cameras', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | count}}

      camera_hs:
        friendly_name: camera indisponible          
        value_template: >-
            {{states                                  
            | reject('in', ['undefined', 'off'])
            | selectattr('entity_id', 'in', state_attr('group.cameras', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | join(' , ')}}

## INTERRUPTEURS            
      compteur_inter_hs:
        friendly_name: Compteur interrupteur indisponible          
        value_template: >-
            {{states                                  
            | reject('in', ['undefined', 'off'])
            | selectattr('entity_id', 'in', state_attr('group.interrupteurs', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | count}}
            
      inter_hs:
        friendly_name: interrupteur indisponible          
        value_template: >-
            {{states                                  
            | reject('in', ['undefined', 'off'])
            | selectattr('entity_id', 'in', state_attr('group.interrupteurs', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | join(' , ')}}
            

###### AUTRES COMPTEURS 
     
      compteur_multimedia:
        friendly_name: Compteur multimédia          
        value_template: >
          {% set lights = [
           states.media_player.tv_salon,
           states.switch.tele_des_parents,
           states.switch.tele_des_parents,
           ] %}
          {{ (lights | selectattr('state','eq','on') | list | count)  + float(states('sensor.compteur_musique')) | round(0) }}
          
         
###### MOUSTIQUES

      moustique:
        friendly_name: Prises anti moustiques allumées          
        value_template: >-
            {{states                                  
            | reject('in', ['undefined', 'off'])
            | selectattr('entity_id', 'in', state_attr('group.moustiques', 'entity_id'))|selectattr('state', 'equalto', 'on')
            | map(attribute='name') | list | join(' , ')}}

      compteur_moustique:
        friendly_name: Compteur prises moustiques         
        value_template: >
            {{states.switch                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('group.moustiques', 'entity_id'))|selectattr('state', 'equalto', 'on')
            | map(attribute='name') | list | count}}

      compteur_moustique_hs:
        friendly_name: Compteur prises anti moustiques indisponible          
        value_template: >-
            {{states                                  
            | reject('in', ['undefined', 'off'])
            | selectattr('entity_id', 'in', state_attr('group.moustiques', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | count}}
            
      moustique_hs:
        friendly_name: prises anti moustiques indisponible          
        value_template: >-
            {{states                                  
            | reject('in', ['undefined', 'off'])
            | selectattr('entity_id', 'in', state_attr('group.moustiques', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | join(' , ')}}
            
###### LUMIERES
         
      lumiere_etat:
        friendly_name: Lumières ON 
        value_template: >-  
          {% if states.light.tout.state == "on" -%}
           {% set porte_on = states | selectattr('entity_id', 'in', state_attr('light.pieces','entity_id')) | selectattr('state','in',['','on']) | map(attribute='name') | list %}
           {%- if porte_on | length == 1 -%} 
           {{ porte_on[0] }}
           {%- else -%}
           {{ porte_on[:-1] | join(', ') }}{{', ' if porte_on | length > 2 else ' '}}et {{ porte_on[-1]}}
           {%- endif -%}
          {%- else -%}
           Eteint
          {%- endif -%}


      compteur_sam:
        friendly_name: Compteur sam         
        value_template: >
            {{states.light                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('light.sam', 'entity_id'))|selectattr('state', 'equalto', 'on')
            | map(attribute='name') | list | count }}

      compteur_parents:
        friendly_name: Compteur parents         
        value_template: >
            {{states.light                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('light.parents', 'entity_id'))|selectattr('state', 'equalto', 'on')
            | map(attribute='name') | list | count }}   
          
      compteur_tom:
        friendly_name: Compteur tom         
        value_template: >
            {{states.light                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('light.tom', 'entity_id'))|selectattr('state', 'equalto', 'on')
            | map(attribute='name') | list | count }}  
          
      compteur_manon:
        friendly_name: Compteur manon léane         
        value_template: >
            {{states.light                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('light.manon_et_leane', 'entity_id'))|selectattr('state', 'equalto', 'on')
            | map(attribute='name') | list | count }}   
          
      compteur_nina:
        friendly_name: Compteur nina         
        value_template: >
            {{states.light                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('light.nina', 'entity_id'))|selectattr('state', 'equalto', 'on')
            | map(attribute='name') | list | count }}    

      compteur_escaliers:
        friendly_name: Compteur escalier et palier         
        value_template: >
            {{states.light                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('light.escaliers', 'entity_id'))|selectattr('state', 'equalto', 'on')
            | map(attribute='name') | list | count }} 
          
      compteur_wc:
        friendly_name: Compteur wc         
        value_template: >
            {{states.light                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('light.lavabo', 'entity_id'))|selectattr('state', 'equalto', 'on')
            | map(attribute='name') | list | count }}

      compteur_lumiere:
        friendly_name: Compteur lumières allumées          
        value_template: >
            {{states.light                                  
            | reject('in', ['undefined', 'unavailable'])
            | rejectattr('state', 'eq', 'off')
            | rejectattr('entity_id', 'search', 'light.tout')
            | rejectattr('entity_id', 'search', 'light.pieces')
            | rejectattr('entity_id', 'search', 'light.parents')
            | rejectattr('entity_id', 'search', 'light.entree_et_couloir')
            | rejectattr('entity_id', 'search', 'light.sejour')
            | rejectattr('entity_id', 'search', 'light.tom')
            | rejectattr('entity_id', 'search', 'light.nina')
            | rejectattr('entity_id', 'search', 'light.manon_et_leane')
            | rejectattr('entity_id', 'search', 'light.escaliers')
            | rejectattr('entity_id', 'search', 'light.lavabo')
            | rejectattr('entity_id', 'search', 'light.texas_instruments_cc1352_cc2652_z_stack_3_30_build_20220219_lavabo')            
            | rejectattr('entity_id', 'search', 'light.lustres_sejour')
            | rejectattr('entity_id', 'search', 'light.salon')
            | rejectattr('entity_id', 'search', 'light.sam')
            | rejectattr('entity_id', 'search', 'trilam')
            | selectattr('state', 'eq', 'on') 
            | map(attribute='name') | list | count }}
          
      compteur_sdb:
        friendly_name: Compteur sdb      
        value_template: >
          {% set lights = [
           states.switch.radiateur,
           ] %}
          {{ lights | selectattr('state','eq','on') | list | count }}
          
      compteur_sejour:
        friendly_name: Compteur séjour      
        value_template: >
            {{states.light                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('light.sejour', 'entity_id'))|selectattr('state', 'equalto', 'on')
            | map(attribute='name') | list | count }}
          
          
      compteur_cagibi:
        friendly_name: Compteur cagibi        
        value_template: >
          {% set lights = [
           states.light.cagibi,
           ] %}
          {{ lights | selectattr('state','eq','on') | list | count }}
          
      compteur_entree:
        friendly_name: Compteur entrée         
        value_template: >
            {{states.light                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('light.entree_et_couloir', 'entity_id'))|selectattr('state', 'equalto', 'on')
            | map(attribute='name') | list | count }}
          
      compteur_salon:
        friendly_name: Compteur salon         
        value_template: >
            {{states.light                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('light.salon', 'entity_id'))|selectattr('state', 'equalto', 'on')
            | map(attribute='name') | list | count }}

      compteur_bureau:
        friendly_name: Compteur bureau         
        value_template: >
          {% set lights = [
           states.light.lampe_de_bureau,
           ] %}
          {{ lights | selectattr('state','eq','on') | list | count }} 

      compteur_lumieres_hs:
        friendly_name: Compteur lumières indisponibles         
        value_template: >-
            {{states                              
            | selectattr('entity_id', 'in', state_attr('light.tout', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | count }}
 
      lumiere_hs:
        friendly_name: Lumières HS (automatisation lum hs notif)
        value_template: >-  
         {% if states('sensor.compteur_lumieres_hs') | float == 0  -%}
         {% else %}
            {{states.light                                  
            | selectattr('entity_id', 'in', state_attr('light.tout', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | join(' , ')}}
         {% endif -%}
         
###### MOUVEMENTS

      mouv_on:
        friendly_name: mouvements état
        value_template: >-      
         {%- if states.binary_sensor.mouvements.state == "on"  -%}
           {% set mouv_on = states | selectattr('entity_id', 'in', state_attr('binary_sensor.mouvements','entity_id')) | selectattr('state','in',['','on']) | map(attribute='name') | list %}
           {%- if mouv_on | length == 1 -%} 
           {{ mouv_on[0] }}
           {%- else -%}
           {{ mouv_on[:-1] | join(' , ') }}{{' ,' if mouv_on | length > 2 else ' '}}et {{ mouv_on[-1]}}
           {%- endif -%}
         {%- else -%}
           Aucun
         {%- endif -%} 
         
      compteur_mouvement:
        friendly_name: Compteur mouvement         
        value_template: >
            {{states.binary_sensor                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('binary_sensor.mouvements', 'entity_id'))|selectattr('state', 'equalto', 'on')
            | map(attribute='name') | list | count}}

      compteur_mouv_hs:
        friendly_name: Compteur mouvement indisponible          
        value_template: >-
            {{states                              
            | selectattr('entity_id', 'in', state_attr('binary_sensor.mouvements', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | count }}

      mouv_hs:
        friendly_name: Mouvement indisponible          
        value_template: >-
            {{states                              
            | selectattr('entity_id', 'in', state_attr('binary_sensor.mouvements', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | join(' , ') }}
            
###### PORTES

      porte_on:
        friendly_name: Porte état
        value_template: >-      
         {%- if states.binary_sensor.portes.state == "on"  -%}
           {% set open_doors = states | selectattr('entity_id', 'in', state_attr('binary_sensor.portes','entity_id')) | selectattr('state','in',['','on']) | map(attribute='name') | list %}
           {%- if open_doors | length == 1 -%} 
           {{ open_doors[0] }}
           {%- else -%}
           {{ open_doors[:-1] | join(' , ') }}{{' ,' if open_doors | length > 2 else ' '}}et {{ open_doors[-1]}}
           {%- endif -%}
         {%- else -%}
           Fermées
         {%- endif -%}

      compteur_portes:
        friendly_name: Compteur portes ouvertes          
        value_template: >
            {{states.binary_sensor                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('binary_sensor.portes', 'entity_id'))|selectattr('state', 'equalto', 'on')
            | map(attribute='name') | list | count}}
            
      compteur_porte_hs:
        friendly_name: Compteur porte indisponible          
        value_template: >-
            {{states                              
            | selectattr('entity_id', 'in', state_attr('binary_sensor.portes', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | count }}

      porte_hs:
        friendly_name: Porte indisponible          
        value_template: >-
            {{states                              
            | selectattr('entity_id', 'in', state_attr('binary_sensor.portes', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | join(' , ') }} 
            
##### APPAREILS
      appareils:
        friendly_name: Autres appareils 
        value_template: >-         
         {%- if states.group.appareils.state == "on"  -%}
           {% set open_doors = states | selectattr('entity_id', 'in', state_attr('group.appareils','entity_id')) | selectattr('state','in',['','on']) | map(attribute='name') | list %}
           {%- if open_doors | length == 1 -%} 
           {{ open_doors[0] }}
           {%- else -%}
           {{ open_doors[:-1] | join(' , ') }}{{' ,' if open_doors | length > 2 else ' '}} et {{ open_doors[-1]}}
           {%- endif -%}
         {%- else -%}
           Aucun
         {%- endif -%} 

      compteur_autre:
        friendly_name: Compteur autre          
        value_template: >
            {{states                               
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('group.appareils', 'entity_id'))|selectattr('state', 'equalto', 'on')
            | map(attribute='name') | list | count}}         
         
###### TV

      compteur_tv:
        friendly_name: Compteur TV           
        value_template: >-
          {% set hs = [
           states.media_player.tv_salon,
           states.switch.tele_des_parents,
           ] %}
          {{ hs | selectattr('state','eq','on') | list | count }}
          
      tv_salon:
        friendly_name: tv salon         
        value_template: >
          {%- if states.media_player.tv_salon.state == "on" -%}
           Salon: {{states.sensor.tv_salon_source.state}} {{states.sensor.tv_salon_programme.state}}
          {%- endif -%} 
          
      tv_parents:
        friendly_name: tv parents         
        value_template: >
          {%- if states.switch.tele_des_parents.state == "on" %}
           Parents: {{states.sensor.tv_parents_source.state}} {{states.sensor.tv_parents_programme.state}}
          {% endif %}
          
      tv_salon_source: 
        friendly_name: TV salon source
        value_template: >- 
          {% if states.media_player.tv_salon.attributes.source == "Live TV" %}
            Live TV
          {% elif states.media_player.tv_salon.attributes.source == "Lecteur multimédia" %}
            Disque Dur
          {% elif states.media_player.tv_salon.attributes.source == "Tableau de bord Maison" %}
            Accueil 
          {% elif states.media_player.tv_salon.attributes.source == "Nintendo Switch" %}
            Switch
          {% elif states.media_player.tv_salon.attributes.source == "Apple OTT" %}
            {% if states.media_player.apple_tv_sejour.attributes.app_id == "com.apple.TVAirPlay" %}
              AirPlay
            {% elif states.media_player.apple_tv_sejour.attributes.app_id == "com.google.ios.youtube" %}
              YouTube              
            {% elif states.media_player.apple_tv_sejour.attributes.app_id == "com.plexapp.plex" %}
              Plex    
            {% elif states.media_player.apple_tv_sejour.attributes.app_id == "com.amazon.aiv.AIVApp" %}
              Prime Video              
            {% else %}
            Apple TV
            {% endif %}
          {% else %}
            {{ states.media_player.tv_salon.attributes.source }} {{ states.media_player.apple_tv_sejour.attributes.media_title }}
          {% endif %} 
          
      tv_salon_vol:
        friendly_name: TV salon volume
        value_template: >-      
          {{ (state_attr('media_player.tv_salon','volume_level') |float(0) *100)|round(0) }}

      tv_salon_sortie_audio:
        friendly_name: TV salon sortie audio
        value_template: >- 
          {% if states.media_player.tv_salon.attributes.sound_output == "headphone" %} 
            Casque
          {% elif states.media_player.tv_salon.attributes.sound_output == "tv_speaker_bluetooth" %} 
            TV + casque            
          {% elif states.media_player.tv_salon.attributes.sound_output == "tv_speaker" %} 
            TV
          {% elif states.media_player.tv_salon.attributes.sound_output == "external_optical" %}
            Barre de son
          {% else %}
            Autre
          {% endif %}

      apple_tv_salon_app_name: 
        friendly_name: Apple TV salon nome application
        value_template: >- 
          {{ states.media_player.apple_tv_sejour.attributes.app_name }}
          
      tv_salon_media_artist: 
        friendly_name: TV salon artiste média
        value_template: >- 
          {{ states.media_player.apple_tv_sejour.attributes.media_artist }}
          
      tv_salon_position_media:
        friendly_name: TV salon durée média
        value_template: >-  
          {{ ((states.media_player.apple_tv_sejour.attributes.media_position) / 60)  |round(0) }}
          
      tv_salon_duree_media:
        friendly_name: TV salon durée média
        value_template: >-  
          {{ ((states.media_player.apple_tv_sejour.attributes.media_duration) / 60)  |round(0) }}

      tv_salon_duree_restante:
        friendly_name: TV salon durée restante
        value_template: >-  
          {{ ((float(states.media_player.apple_tv_sejour.attributes.media_duration)/60)  - (float(states.media_player.apple_tv_sejour.attributes.media_position)/60)) | round(0)}} 

      tv_salon_temps_restant: 
        friendly_name: TV salon temps restant
        value_template: >- 
          {% if states.media_player.tv_salon.state == "off" %} 
          {% elif (states.media_player.apple_tv_sejour.state == 'playing' and (states.sensor.tv_salon_duree_media.state == "" or states.sensor.tv_salon_duree_media.state == "unavailable"))%}
          {% elif (states.media_player.apple_tv_sejour.state == 'playing' and (states.sensor.tv_salon_duree_media.state != "" and states.sensor.tv_salon_duree_media.state != "unavailable"))%}
            - {{states.sensor.tv_salon_duree_restante.state }} min /  {{states.sensor.tv_salon_duree_media.state }} min
          {% elif states.media_player.apple_tv_sejour.state != 'playing'%}
          {% endif %}
          
      tv_salon_duree_media_pourcentage:
        friendly_name: TV salon durée média
        value_template: >-      
          {{ ((states.media_player.apple_tv_sejour.attributes.media_position) * 100 / states.media_player.apple_tv_sejour.attributes.media_duration) |round(1) }}

      tv_salon_programme: 
        friendly_name: TV salon programme
        value_template: >- 
          {% if states.media_player.tv_salon.state == "off" %} 
          {% elif states.media_player.tv_salon.attributes.source == "Live TV" %}
            <br>Chaîne: {{ states.media_player.tv_salon.attributes.media_title }}
          {% elif states.media_player.tv_salon.attributes.source == "Apple OTT" %}            
            {% if (states.media_player.apple_tv_sejour.state == 'playing' and (states.sensor.tv_salon_duree_media.state == "" or states.sensor.tv_salon_duree_media.state == "unavailable"))%}
              {% if states.sensor.tv_salon_media_artist.state == "unavailable" or states.sensor.tv_salon_media_artist.state == "" %}
                {{ states.sensor.tv_salon_media_artist.state}} <br>{{ states.media_player.apple_tv_sejour.attributes.media_title }} 
              {% else %}
                {{ states.sensor.tv_salon_media_artist.state}}<br>{{ states.media_player.apple_tv_sejour.attributes.media_title }} 
              {% endif %}
            {% elif (states.media_player.apple_tv_sejour.state == 'playing' and (states.sensor.tv_salon_duree_media.state != "" and states.sensor.tv_salon_duree_media.state != "unavailable"))%}
              {% if states.sensor.tv_salon_media_artist.state == "unavailable" or states.sensor.tv_salon_media_artist.state == "" %}
              {{ states.sensor.tv_salon_media_artist.state }} <br>{{states.media_player.apple_tv_sejour.attributes.media_title }} 
              {% else %}
              {{ states.sensor.tv_salon_media_artist.state }} <br>{{states.media_player.apple_tv_sejour.attributes.media_title }}
              {% endif %}
            {% elif states.media_player.apple_tv_sejour.state != 'playing'%}
              <br>Pause
            {% endif %}
          {% endif %}
          
      tv_parents_source:
        friendly_name: TV parents source
        value_template: >-      
          {% if states.switch.tele_des_parents.state == "on" %}
            {% if states.media_player.apple_tv_parents.attributes.app_id == "tv.molotov.MolotovAppProd" %}
              {{ states.media_player.apple_tv_parents.attributes.media_artist }}
            {% else %}
              {{ states.media_player.apple_tv_parents.attributes.app_name }} 
            {% endif %}
          {% else %}
          {% endif %} 

      tv_parents_vol:
        friendly_name: TV parents volume
        value_template: >-      
          {{ (state_attr('media_player.papa','volume_level') |float(0) *100)|round(0) }}

      tv_parents_sortie_audio:
        friendly_name: TV parents sortie audio
        value_template: >- 
          {% if states.media_player.aurel_s_fire_tv_cube.attributes.source == "Local Speaker" %}
            TV
          {% elif states.media_player.aurel_s_fire_tv_cube.attributes.source == "M-700BT" %}
            Enceinte
          {% else %}
            Autre
          {% endif %}

      apple_tv_parents_app_name: 
        friendly_name: Apple TV parents nome application
        value_template: >- 
          {{ states.media_player.apple_tv_parents.attributes.app_name }}
          
      tv_parents_media_artist: 
        friendly_name: TV parents artiste média
        value_template: >- 
          {{ states.media_player.apple_tv_parents.attributes.media_artist }}
          
      tv_parents_position_media:
        friendly_name: TV parents durée média
        value_template: >-  
          {{ ((states.media_player.apple_tv_parents.attributes.media_position) / 60)  |round(0) }}
          
      tv_parents_duree_media:
        friendly_name: TV parents durée média
        value_template: >-  

          {{ ((states.media_player.apple_tv_parents.attributes.media_duration) / 60)  |round(0) }}

      tv_parents_duree_restante:
        friendly_name: TV parents durée restante
        value_template: >-  
          {{ ((float(states.media_player.apple_tv_parents.attributes.media_duration)/60)  - (float(states.media_player.apple_tv_parents.attributes.media_position)/60)) | round(0)}} 

      tv_parents_temps_restant: 
        friendly_name: TV parents temps restant
        value_template: >- 
          {% if states.switch.tele_des_parents.state == "off" %} 
          {% elif (states.media_player.apple_tv_parents.state == 'playing' and (states.sensor.tv_parents_duree_media.state == "" or states.sensor.tv_parents_duree_media.state == "unavailable"))%}
          {% elif (states.media_player.apple_tv_parents.state == 'playing' and (states.sensor.tv_parents_duree_media.state != "" and states.sensor.tv_parents_duree_media.state != "unavailable"))%}
            - {{states.sensor.tv_parents_duree_restante.state }} min / {{states.sensor.tv_parents_duree_media.state }}
          {% elif states.media_player.apple_tv_parents.state != 'playing'%}
          {% endif %} 
          
      tv_parents_duree_media_pourcentage:
        friendly_name: TV salon durée média
        value_template: >-      
          {{ ((states.media_player.apple_tv_parents.attributes.media_position) * 100 / states.media_player.apple_tv_parents.attributes.media_duration) |round(1) }}
          
      tv_parents_programme: 
        friendly_name: TV parents programme
        value_template: >- 
          {% if states.switch.tele_des_parents.state == "off" %} 
          {% elif states.switch.tele_des_parents.state == "on" %}
              {% if (states.media_player.apple_tv_parents.state == 'playing' and (states.sensor.tv_parents_duree_media.state == "" or states.sensor.tv_parents_duree_media.state == "unavailable"))%}
                {% if states.sensor.tv_parents_media_artist.state == "unavailable" or states.sensor.tv_salon_media_artist.state == "" %}               
                {{ states.sensor.tv_parents_media_artist.state}} {{ states.media_player.apple_tv_parents.attributes.media_title }} 
                {% else %}
                {{ states.sensor.tv_parents_media_artist.state}}<br>{{ states.media_player.apple_tv_parents.attributes.media_title }} 
                {% endif %}
              {% elif (states.media_player.apple_tv_parents.state == 'playing' and (states.sensor.tv_parents_duree_media.state != "" and states.sensor.tv_parents_duree_media.state != "unavailable"))%}
                {% if states.sensor.tv_parents_media_artist.state == "unavailable" or states.sensor.tv_salon_media_artist.state == "" %}               
                {{ states.sensor.tv_parents_media_artist.state }} {{states.media_player.apple_tv_parents.attributes.media_title }} 
                {% else %}
                {{ states.sensor.tv_parents_media_artist.state }}<br>{{states.media_player.apple_tv_parents.attributes.media_title }} 
                {% endif %}
             {% elif states.media_player.apple_tv_parents.state != 'playing'%}
              Pause
             {% endif %}
          {% endif %}
          
###### MUSIQUE
      compteur_musique:
        friendly_name: Compteur Musique          
        value_template: >-
            {{states       
            | reject('in', ['undefined', 'unavailable'])
            | rejectattr('entity_id', 'search', 'media_player.le_bureau')
            | rejectattr('entity_id', 'search', 'media_player.le_salon')
            | rejectattr('entity_id', 'search', 'media_player.papa')
            | selectattr('entity_id', 'in', state_attr('group.echos', 'entity_id'))|selectattr('state', 'equalto', 'playing')
            | map(attribute='name') | list | count }}

      musique:
        friendly_name: Musique          
        value_template: >
            {{states                               
            | reject('in', ['undefined', 'unavailable'])
            | rejectattr('entity_id', 'search', 'media_player.le_bureau')
            | rejectattr('entity_id', 'search', 'media_player.le_salon')
            | rejectattr('entity_id', 'search', 'media_player.papa')
            | selectattr('entity_id', 'in', state_attr('group.echos', 'entity_id'))|selectattr('state', 'equalto', 'playing')
            | map(attribute='name') | list | join(' , ')}} 
            
      musique_en_cours:
        friendly_name: Musique en cours         
        value_template: >-
            {%  if is_state("media_player.partout", "playing") %}
            Partout: {{states.media_player.partout.attributes.media_album_name}} ({{states.media_player.partout.attributes.media_title}})<br>
            {% endif %}
            {%  if is_state("media_player.sejour", "playing") %}
            Séjour: {{states.media_player.sejour.attributes.media_album_name}} ({{states.media_player.sejour.attributes.media_title}})<br>
            {% endif %}
            {%  if is_state("media_player.la_cuisine", "playing") %}
            Cuisine: {{states.media_player.la_cuisine.attributes.media_album_name}} ({{states.media_player.la_cuisine.attributes.media_title}})<br>
            {% endif %} 
            {%  if is_state("media_player.la_salle_de_bain", "playing") %}
            Salle de bain: {{states.media_player.la_salle_de_bain.attributes.media_album_name}} ({{states.media_player.la_salle_de_bain.attributes.media_title}})<br>
            {% endif %} 
            {%  if is_state("media_player.le_garage", "playing") %}
            Garage: {{states.media_player.le_garage.attributes.media_album_name}} ({{states.media_player.le_garage.attributes.media_title}})<br>
            {% endif %}
            {%  if is_state("media_player.tom", "playing") %}
            Tom: {{states.media_player.tom.attributes.media_album_name}} ({{states.media_player.tom.attributes.media_title}})<br>
            {% endif %}
            {%  if is_state("media_player.grande_chambre", "playing") %}
            Manon & Léane: {{states.media_player.grande_chambre.attributes.media_album_name}} ({{states.media_player.grande_chambre.attributes.media_title}})<br>
            {% endif %}
            {%  if is_state("media_player.leane", "playing") and not is_state("media_player.grande_chambre", "playing")%}
            Léane: {{states.media_player.leane.attributes.media_album_name}} ({{states.media_player.leane.attributes.media_title}})<br>
            {% endif %}
            {%  if is_state("media_player.nina", "playing") %}
            Nina: {{states.media_player.nina.attributes.media_album_name}} ({{states.media_player.nina.attributes.media_title}})<br>
            {% endif %}    

      compteur_echo_hs:
        friendly_name: Compteur echo indisponible          
        value_template: >-
            {{states                              
            | reject('in', ['undefined', 'off'])
            | selectattr('entity_id', 'in', state_attr('group.echos', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | count }}
            
      echo_hs:
        friendly_name: echo indisponible          
        value_template: >-
            {{states                              
            | reject('in', ['undefined', 'off'])
            | selectattr('entity_id', 'in', state_attr('group.echos', 'entity_id'))|selectattr('state', 'equalto', 'unavailable')
            | map(attribute='name') | list | join(' , ') }}
            
###### MACHINES 
          
      lave_vaisselle:
        friendly_name: lave-vaisselle 
        value_template: >-   
          {% if states.sensor.lave_vaisselle_operation_state.state == "Run" %}
            Fin: {{as_timestamp(states('sensor.lave_vaisselle_remaining_program_time')) | timestamp_custom('%-Hh%M ', 'true') }}
          {%- elif states.sensor.lave_vaisselle_operation_state.state == "Finished" %}
            Fini 
          {%- elif states.sensor.lave_vaisselle_operation_state.state == "Ready" -%}
            Prêt      
          {%- else %}
            ...
          {%- endif %}  
          
      lave_vaisselle_duree:
        friendly_name: lave-vaisselle durée
        value_template: >-   
          {{as_timestamp(states('sensor.lave_vaisselle_remaining_program_time')) | timestamp_custom('%-Hh%M ', 'true') }}

      lave_vaisselle_termine:
        friendly_name: lave-vaisselle terminé depuis
        value_template: >-  
          {%- set time = (as_timestamp(now()) - as_timestamp(states.sensor.lave_vaisselle_program_progress.last_changed)) | int  %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set minutes = '{}min'.format(minutes)  if minutes > 0 else '' %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set hours = '{}h'.format(hours)  if hours > 0 else '' %}
          {%- set days = (time // 86400) %}
          {%- set days = '{}j'.format(days)  if days > 0 else '' %}
          {{ 'Depuis - de 1min' if time < 60 else 'Depuis ' + days + hours + minutes }}

          
      lave_linge_duree:
        friendly_name: lave-linge durée
        value_template: >-   
          {% if states.input_select.lave_linge.state == 'on' %}
            {{ as_timestamp(states.input_select.lave_linge.last_changed) | timestamp_custom("%Hh%M") }}  
          {% elif states.input_select.lave_linge.state == 'veille' %}
            {{ as_timestamp(states.input_select.lave_linge.last_changed) | timestamp_custom("%Hh%M") }} 
          {%- else %}
          {%- endif %}

      seche_linge_duree:
        friendly_name: seche-linge durée
        value_template: >-   
          {% if states.input_boolean.seche_linge.state == 'on' %}
            {{ as_timestamp(states.input_boolean.seche_linge.last_changed) | timestamp_custom("%Hh%M") }}  
          {%- else %}
          {%- endif %}

      compteur_machines:
        friendly_name: Compteur machines a laver          
        value_template: >-
            {{states                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('entity_id', 'in', state_attr('group.machines', 'entity_id'))|selectattr('state', 'equalto', 'on')
            | map(attribute='name') | list | count}} 
            
###### TROTTINETTE

      trottinette_tom_charge_duree:
        friendly_name: trottinette Tom en charge depuis depuis
        value_template: >- 
          {%- set time = (as_timestamp(now()) - as_timestamp(states.switch.trottinette.last_changed)) | int  %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set minutes = '{}min'.format(minutes)  if minutes > 0 else '' %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set hours = '{}h'.format(hours)  if hours > 0 else '' %}
          {%- set days = (time // 86400) %}
          {%- set days = '{}j'.format(days)  if days > 0 else '' %}
          {{ 'depuis - de 1min' if time < 60 else 'depuis ' + days + hours + minutes }}
          
###### ASPIS

      walle_statut:
        friendly_name: "WallE statuts"
        value_template: "{{ state_attr('vacuum.wall_e' , 'status') }}"   
      walle_error:
        friendly_name: "WallE erreur"
        value_template: "{{ state_attr('vacuum.wall_e' , 'error') }}"        
      r2d2_statut:
        friendly_name: "R2D2 statuts"
        value_template: "{{ state_attr('vacuum.r2d2' , 'status') }}"         
      r2d2_error:
        friendly_name: "R2D2 erreur"
        value_template: "{{ state_attr('vacuum.r2d2' , 'error') }}" 

      walle_state:
        friendly_name: walle state (carte aspi)
        value_template: >- 
          {% set aspi = states('vacuum.wall_e')%}
          {% set traduction = {'unavailable':'Indisponible', 'cleaning':'Nettoyage', 'returning':'Retour', 'error':'️ERREUR', 'idle':'Pause', 'paused':'Pause', 'docked':'Base'}%}
          {% if is_state("vacuum.wall_e", "cleaning") and is_state("binary_sensor.wall_e_mop_attached", "on") -%}
          Serpillère
          {%- else %}
          {{ traduction[aspi] }}  
          {%- endif %}  
              
      r2d2_state:
        friendly_name: r2d2 state (carte aspi)
        value_template: >- 
          {% set aspi = states('vacuum.r2d2')%}
          {% set traduction = {'unavailable':'Indisponible', 'cleaning':'Nettoyage', 'returning':'Retour', 'error':'️ERREUR', 'idle':'Pause', 'paused':'Pause', 'docked':'Base'}%}
          {{ traduction[aspi] }}          

      walle_batterie:
        friendly_name: "Wall-E batterie"
        value_template: '{{ states.vacuum.wall_e.attributes.battery_level }}' 
          
      r2d2_batterie:
        friendly_name: "r2d2 batterie"
        value_template: '{{ states.vacuum.r2d2.attributes.battery_level }}' 
        
      walle_erreur:
        friendly_name: WallE message d'erreur
        value_template: >-      
          {% set walle_error = states('sensor.walle_error') 
                | replace('Dust collector missing', 'Bac à poussières non installé')
                | replace('Laser distance sensor error', 'Erreur du capteur laser. Essayez de tourner la tête du laser.')
                | replace('Device stuck, clean area', 'coincé ou bloqué ! Retirez les obstacles')
                | replace('Docking station not reachable', 'Impossible d atteindre la station de charge')
                | replace('Wheels on top of void, move robot', 'Roues suspendues, déplacez le robot')
                | replace('Charging fault', 'Impossible de charger correctement, assurez-vous que les surfaces de chargements sont propres')
                | replace('Clean hovering sensors, move robot', 'Problème avec les capteurs de dénivelé : nettoyez les détecteurs de dénivelé, éloignez le robot, et redémarrez-le.') %} 
          {% if is_state("vacuum.wall_e", "error") -%}
            {% if is_state("sensor.walle_error", "unknown") -%}
            Wall-E : {{ states('sensor.walle_error') }}
            {%- else -%}
            Wall-E : {{ walle_error }}
            {%- endif %}
          {%- endif %}
              
      r2d2_erreur:
        friendly_name: r2d2 message d'erreur
        value_template: >-      
          {% set r2d2_error = states('sensor.r2d2_error') 
                | replace('Dust collector missing', 'Bac à poussières non installé')
                | replace('Laser distance sensor error', 'Erreur du capteur laser. Essayez de tourner la tête du laser.')
                | replace('Device stuck, clean area', 'coincé ou bloqué ! Retirez les obstacles')
                | replace('Docking station not reachable', 'Impossible d atteindre la station de charge')
                | replace('Wheels on top of void, move robot', 'Roues suspendues, déplacez le robot')
                | replace('Charging fault', 'Impossible de charger correctement, assurez-vous que les surfaces de chargements sont propres')
                | replace('Clean hovering sensors, move robot', 'Problème avec les capteurs de dénivelé : nettoyez les détecteurs de dénivelé, éloignez le robot, et redémarrez-le.') %} 
          {% if is_state("vacuum.r2d2", "error") -%}
            {% if is_state("sensor.r2d2_error", "unknown") -%}
            R2D2 : {{ states('sensor.r2d2_error') }}
            {%- else -%}
            R2D2 : {{ r2d2_error }}
            {%- endif %} 
          {%- endif %} 

      compteur_aspi:
        friendly_name: Compteur aspi           
        value_template: >-
          {{states.vacuum                                  
           | reject('in', ['undefined', 'unavailable'])
           | selectattr('state', 'eq', 'cleaning') 
           | map(attribute='name') | list | count }}
           
      compteur_aspi_hs:
        friendly_name: Compteur aspi indisponible          
        value_template: >-
          {{states.vacuum                                  
           | reject('in', ['undefined', 'off'])
           | selectattr('state', 'eq', 'unavailable') 
           | map(attribute='name') | list | count }}
           
      aspi_hs:
        friendly_name: aspi indisponible          
        value_template: >-
          {{states.vacuum                                  
           | reject('in', ['undefined', 'off'])
           | selectattr('state', 'eq', 'unavailable') 
           | map(attribute='name') | list | join(' , ') }}

      aspi_mode_vacances:
        friendly_name: passage aspi en mode vacances          
        value_template: >-
          {% set aspi = as_timestamp(states.schedule.mode_absent_calendrier_aspi.attributes.next_event) | timestamp_custom("%A %d/%m à %Hh%M")
            | replace('Monday', 'Lundi')
            | replace('Tuesday', 'Mardi')
            | replace('Wednesday', 'Mercredi')
            | replace('Thursday', 'Jeudi')
            | replace('Friday', 'Vendredi')
            | replace('Saturday', 'Samedi')
            | replace('Sunday', 'Dimanche') %}
          {{ aspi }}
          
###### SURVEILLANCE SYSTEME          
        
      systeme_avertissement:
        friendly_name: Surveillance systeme
        value_template: >-    

              {% set time  = ((as_timestamp(now()) - as_timestamp(states.sensor.compteur_thermo_hs.last_changed)) /60) | round(0) %}
              {% if  states('sensor.compteur_thermo_hs') | float(0) > 4 and time > 5  -%}
                  Bluetooth </b> depuis {{ as_timestamp(states.sensor.compteur_thermo_hs.last_changed) | timestamp_custom("%Hh%M") }} ({{relative_time(states.sensor.compteur_thermo_hs.last_changed)}})<br>
              {% else -%}
              {% endif -%}
               
              {% set serrure = states | selectattr('entity_id', 'in', state_attr('group.serrures','entity_id')) | selectattr('state','in',['','unavailable']) | map(attribute='name') | list %}
              {%- if serrure | length == 0 -%}
              {%- elif serrure | length == 1 -%}
               Serrure :</b> {{ serrure[0]}}<br>
              {%- else -%}
               Serrures :</b> {{ serrure[:-1] | join(', ') }}{{', ' if serrure | length > 1 else ' '}}et {{ serrure[-1]}}<br>
               {%- endif -%}
               
              {% set cam = states | selectattr('entity_id', 'in', state_attr('group.cameras','entity_id')) | selectattr('state','in',['','unavailable']) | map(attribute='name') | list %}
              {%- if cam | length == 0 -%}
              {%- elif cam | length == 1 -%}
               Caméra :</b> {{ cam[0]}}<br>
              {%- else -%}
               Caméras :</b> {{ cam[:-1] | join(', ') }}{{', ' if cam | length > 1 else ' '}}et {{ cam[-1]}}<br>
               {%- endif -%}

              {% set time  = ((as_timestamp(now()) - as_timestamp(states.sensor.compteur_plante_hs.last_changed)) /60) | round(0) %}
              {% if  states('sensor.compteur_plante_hs') | float(0) > 0 and time > 5  -%}
                {% set plante = states | selectattr('entity_id', 'in', state_attr('group.plantes','entity_id')) | selectattr('state','in',['','unavailable']) | map(attribute='name') | list %}
                {%- if plante | length == 0 -%}
                {%- elif plante | length == 1 -%}
                 Plante :</b> {{ plante[0]}}<br>
                {%- else -%}
                 Plantes :</b> {{ plante[:-1] | join(', ') }}{{', ' if plante | length > 1 else ' '}}et {{ plante[-1]}}<br>
                 {%- endif -%}
              {%- endif -%}

            
            
              {%- if states('sensor.compteur_lumieres_hs') | float(0) > 0  -%}
               {% set lum_hs = states | selectattr('entity_id', 'in', state_attr('light.tout','entity_id')) | selectattr('state','in',['','unavailable']) | map(attribute='name') | list %}
               {% if lum_hs | length == 1 -%} 
              Lumière :</b> {{ lum_hs[0] }}<br>
               {% else -%}
               {{ states('sensor.compteur_lumieres_hs') }} lumières :</b> {{ lum_hs[:-1] | join(' , ') }}{{' ,' if lum_hs | length > 2 else ' '}} et {{ lum_hs[-1]}}<br>
               {% endif -%}
              {% else -%}
              {% endif -%}

              {%- if states.input_boolean.noel.state == "on"  -%}
               {% set open_doors = states | selectattr('entity_id', 'in', state_attr('group.noel','entity_id')) | selectattr('state','in',['','unavailable']) | map(attribute='name') | list %}
               {%- if open_doors | length == 1 -%} 
               Lumière Noël :</b> { open_doors[0] }}
               {%- elif open_doors | length > 1 -%}
               Lumières Noël :</b> {{ open_doors[:-1] | join(' , ') }} {{'' if open_doors | length == 2 else ' '}}et {{ open_doors[-1]}}
               {%- else -%}
               {%- endif -%}
              {%- else -%}
              {%- endif -%}
              
               
              {% set porte_hs = states | selectattr('entity_id', 'in', state_attr('binary_sensor.portes','entity_id')) | selectattr('state','in',['','unavailable']) | map(attribute='name') | list %}
              {%- if porte_hs | length == 0 -%} 
              {%- elif porte_hs | length == 1 -%} 
               Porte :</b> {{ porte_hs[0] }}<br>
              {%- else -%}
               Porte :</b> {{ porte_hs[:-1] | join(' , ') }}{{' ,' if porte_hs | length > 2 else ' '}} et {{ porte_hs[-1]}}<br>
              {%- endif -%}

              {% set mouv_hs = states | selectattr('entity_id', 'in', state_attr('binary_sensor.mouvements','entity_id')) | selectattr('state','in',['','unavailable']) | map(attribute='name') | list %}
              {%- if mouv_hs | length == 0 -%} 
              {%- elif mouv_hs | length == 1 -%} 
               Mouvement :</b> {{ mouv_hs[0] }}<br>
              {%- else -%}
               Mouvements :</b> {{ mouv_hs[:-1] | join(' , ') }}{{' ,' if mouv_hs | length > 2 else ' '}} et {{ mouv_hs[-1]}}<br>
              {%- endif -%}

              {% set moustique_hs = states | selectattr('entity_id', 'in', state_attr('group.moustiques','entity_id')) | selectattr('state','in',['','unavailable']) | map(attribute='name') | list %}
              {%- if moustique_hs | length == 0 -%} 
              {%- elif moustique_hs | length == 1 -%} 
               Anti-moustiques :</b> {{ moustique_hs[0] }}<br>
              {%- else -%}
               Anti-moustiques :</b> {{ moustique_hs[:-1] | join(' , ') }}{{' ,' if moustique_hs | length > 2 else ' '}} et {{ moustique_hs[-1]}}<br>
              {%- endif -%}
           
              {%- if states('sensor.compteur_zigbee_hs') | float(0) > 0  -%}
               {% set lum_hs = states | selectattr('entity_id', 'in', state_attr('group.zigbee','entity_id')) | selectattr('state','in',['','unavailable']) | map(attribute='name') | list %}
               {% if lum_hs | length == 1 -%} 
               Appareil :</b> {{ lum_hs[0] }}<br>
               {% else -%}
                Appareils :</b> {{ lum_hs[:-1] | join(' , ') }}{{' ,' if lum_hs | length > 2 else ' '}} et {{ lum_hs[-1]}}<br>
               {% endif -%}
              {% else -%}
              {% endif -%} 

              {%- if states('sensor.compteur_echo_hs') | float(0) > 0  -%}
              {% set open_doors = states | selectattr('entity_id', 'in', state_attr('group.echos','entity_id')) | selectattr('state','in',['on','unavailable']) | map(attribute='name') | list %}
               {% if open_doors | length == 1 -%} 
                Echo :</b> {{ open_doors[0] }}<br>
               {% else -%}
                {{ states('sensor.compteur_echo_hs') }} Echos :</b> {{ open_doors[:-1] | join(' , ') }}{{' ,' if open_doors | length > 2 else ' '}}et {{ open_doors[-1]}}<br>
               {% endif -%}
              {% endif -%}

              {% set time  = ((as_timestamp(now()) - as_timestamp(states.sensor.compteur_thermo_hs.last_changed)) /60) | round(0) %}
              {% if  states('sensor.compteur_thermo_hs') | float(0) > 0 and time > 5  -%}
               {% set lum_hs = states | selectattr('entity_id', 'in', state_attr('group.thermo','entity_id')) | selectattr('state','in',['','unavailable']) | map(attribute='name') | list %}
               {% if lum_hs | length == 0 -%} 
               {% elif lum_hs | length == 1 -%} 
               Thermomètre</b> : {{ lum_hs[0] }}<br>
               {% else -%}
                {{ states('sensor.compteur_thermo_hs') }} Thermomètres :</b> {{ lum_hs[:-1] | join(' , ') }}{{' ,' if lum_hs | length > 2 else ' '}} et {{ lum_hs[-1]}}<br>
               {% endif -%}
              {% else -%}
              {% endif -%}
              
              {%- if is_state('device_tracker.arlo_sonnette', 'not_home') -%}
               Sonnette</b> <br>
              {% endif -%}

              {%- if is_state('media_player.apple_tv_sejour', 'unavailable') -%}
               Apple TV salon<br>
              {% endif -%}
              
              {%- if is_state('media_player.apple_tv_parents', 'unavailable') -%}
               Apple TV parents<br>
              {% endif -%}
              
              {% set time  = ((as_timestamp(now()) - as_timestamp(states.vacuum.wall_e.last_changed)) /60) | round(0) %}
              {%- if states('vacuum.wall_e')  == 'unavailable' and time > 1 -%}
                Wall-E indisponible</b> depuis {{ as_timestamp(states.vacuum.wall_e.last_changed) | timestamp_custom("%Hh%M") }} ({{relative_time(states.vacuum.wall_e.last_changed)}})<br>
              {% endif -%}
              {% set time  = ((as_timestamp(now()) - as_timestamp(states.vacuum.r2d2.last_changed)) /60) | round(0) %}
              {%- if states('vacuum.r2d2')  == 'unavailable' and time > 1 -%}
                R2D2 indisponible</b> depuis {{ as_timestamp(states.vacuum.r2d2.last_changed) | timestamp_custom("%Hh%M") }} ({{relative_time(states.vacuum.r2d2.last_changed)}})<br>
              {% endif -%}
             

              {%- if states('switch.lave_vaisselle_power')  == 'unavailable'  or 
              states('binary_sensor.lave_vaisselle_door')  == 'unavailable' -%}
                Lave-vaisselle</b><br>
              {% endif -%} 

              {% set interr_hs = states | selectattr('entity_id', 'in', state_attr('group.interrupteurs','entity_id')) | selectattr('state','in',['','unavailable']) | map(attribute='name') | list %}
              {% if interr_hs | length == 0 -%}
              {% elif interr_hs | length == 1 -%}
              Interrupteur :</b> {{ interr_hs[0] }}<br>
              {% else -%}
              Interrupteurs :</b> {{ interr_hs[:-1] | join(' , ') }}{{' ,' if interr_hs | length > 2 else ' '}} et {{ interr_hs[-1]}}<br>
              {% endif -%}

      erreur_aspi: 
        friendly_name: Surveillance erreur aspi
        value_template: >-
              {% set walle_error = states('sensor.walle_error') 
                | replace('Dust collector missing', 'Bac à poussières non installé')
                | replace('Laser distance sensor error', 'Erreur du capteur laser. Essayez de tourner la tête du laser.')
                | replace('Device stuck, clean area', 'coincé ou bloqué ! Retirez les obstacles')
                | replace('Docking station not reachable', 'Impossible d atteindre la station de charge')
                | replace('Charging fault', 'Impossible de charger correctement, assurez-vous que les surfaces de chargements sont propres')
                | replace('Wheels on top of void, move robot', 'Roues suspendues, déplacez le robot')
                | replace('Clean hovering sensors, move robot', 'Problème avec les capteurs de dénivelé : nettoyez les détecteurs de dénivelé, éloignez le robot, et redémarrez-le.') %} 
              {% if is_state("vacuum.wall_e", "error") -%}
                {% if is_state("sensor.walle_error", "unknown") -%}
                Wall-E :</b> {{ states('sensor.walle_error') }}<br>
                {%- else -%}
                Wall-E :</b> {{ walle_error }}<br>
                {%- endif %}
              {%- endif %}  
              
              {% set r2d2_error = states('sensor.r2d2_error')
                | replace('Dust collector missing', 'Bac à poussières non installé')
                | replace('Laser distance sensor error', 'Erreur du capteur laser. Essayez de tourner la tête du laser.')
                | replace('Device stuck, clean area', 'coincé ou bloqué ! Retirez les obstacles')
                | replace('Docking station not reachable', 'Impossible d atteindre la station de charge')
                | replace('Wheels on top of void, move robot', 'Roues suspendues, déplacez le robot')
                | replace('Charging fault', 'Impossible de charger correctement, assurez-vous que les surfaces de chargements sont propres')
                | replace('Clean hovering sensors, move robot', 'Problème avec les capteurs de dénivelé : nettoyez les détecteurs de dénivelé, éloignez le robot, et redémarrez-le.') %} 
              {% if is_state("vacuum.r2d2", "error") -%}
                {% if is_state("sensor.r2d2_error", "unknown") -%}
                R2D2 :</b> {{ states('sensor.r2d2_error') }}<br>
                {%- else -%}
                R2D2 :</b> {{ r2d2_error }}<br>
                {%- endif %} 
              {%- endif %} 
              
      serrures_bloquees: 
        friendly_name: Surveillance serrures bloquées
        value_template: >-  
              {% set serrure = states | selectattr('entity_id', 'in', state_attr('group.serrures','entity_id')) | selectattr('state','in',['','jammed']) | map(attribute='name') | list %}
              {%- if serrure | length == 0 -%}
              {%- elif serrure | length == 1 -%}
               Serrure bloquée :</b> {{ serrure[0]}}<br>
              {%- else -%}
               Serrures bloquées :</b> {{ serrure[:-1] | join(', ') }}{{', ' if serrure | length > 1 else ' '}}et {{ serrure[-1]}}<br>
               {%- endif -%}
               
      batterie_faible:
        friendly_name: Surveillance batteries et piles
        value_template: >-                
              {% set compteur_pile_faible =
              states.sensor                  
              | selectattr('attributes.device_class', 'defined') 
              | selectattr('attributes.device_class', '==', 'battery') 
              | rejectattr('state', 'in', ['unavailable', 'unknown'])
              | rejectattr('state', 'eq', '100')   
              | selectattr('state', 'lt', '30')
              | map(attribute='name') | list | count%}
              {%set pile_faible =
              states.sensor                  
              | selectattr('attributes.device_class', 'defined') 
              | selectattr('attributes.device_class', '==', 'battery') 
              | rejectattr('state', 'in', ['unavailable', 'unknown'])
              | rejectattr('state', 'eq', '100')   
              | selectattr('state', 'lt', '30')
              | map(attribute='name') | list | join(' , ')%}
              {%set etat_pile_faible =
              states.sensor                  
              | selectattr('attributes.device_class', 'defined') 
              | selectattr('attributes.device_class', '==', 'battery') 
              | rejectattr('state', 'in', ['unavailable', 'unknown'])
              | rejectattr('state', 'eq', '100')   
              | selectattr('state', 'lt', '30')
              | map(attribute='state') | list | join(' , ')%}
              {% if compteur_pile_faible | float(0) == 0 -%}
              {% elif compteur_pile_faible | float(0) == 1 -%}
                  </b> {{ pile_faible }} {{ etat_pile_faible }}%
              {% else -%}
                  {{ compteur_pile_faible }} :</b> {{ pile_faible }}
              {% endif -%}


      averissement_rpi:
        friendly_name: Surveillance rpi
        value_template: >-
              {%- if states('sensor.disk_use_percent_home')| float(0) > 70.0 -%}
               Espace DD : {{states('sensor.disk_use_percent_home')}}%<br>
              {% endif -%}             
              {%- if states('sensor.cpu_temperature')| float(0) > 70 -%}
               CPU : {{states('sensor.cpu_temperature')}}°<br>
              {% endif -%}
              {%- if states('sensor.memory_use_percent')| float(0) > 70 -%}
               Mémoire : {{states('sensor.memory_use_percent')}}%<br>
              {% endif -%}
              {%- if states('sensor.processor_use_percent')| float(0) > 70 -%}
               Processeur : {{states('sensor.processor_use_percent')}}%<br>
              {% endif -%}
              
###### MISE A JOUR HACS ET SUPERVISOR
          
      maj:
        friendly_name: Mise à jour 
        value_template: >-           
          {% if states('sensor.hacs') | float < 1 and states('binary_sensor.home_assistant_versions_update_available')  == 'off' and states('update.home_assistant_operating_system_update')  == 'off' and states('update.home_assistant_supervisor_update') == 'off' %}
            Aucune mise à jour
          {% elif states('sensor.hacs') | float > 0 or states('binary_sensor.home_assistant_versions_update_available') == 'on' or states('update.home_assistant_operating_system_update')  == 'on' or states('update.home_assistant_supervisor_update') == 'on' -%}
          {%- endif -%}
            {%- if states('binary_sensor.home_assistant_versions_update_available') == 'on' or states('update.home_assistant_supervisor_update')  == 'on' or states('update.home_assistant_operating_system_update')  == 'on' %} 
               {%- if states('binary_sensor.home_assistant_versions_update_available') == 'on' %} 
                 HA Core {{ states('sensor.home_assistant_versions') }}<br>
               {%- endif -%}
               {%- if states('update.home_assistant_supervisor_update') == 'on' %} 
                 HA Supervisor {{state_attr('update.home_assistant_supervisor_update','latest_version')}}<br>
               {%- endif -%}
               {%- if states('update.home_assistant_operating_system_update')  == 'on' %} 
                 HassOS {{ states('sensor.home_assistant_operating_system_newest_version') }}<br>
               {%- endif -%}
            {%- endif -%}
            {%- if states('sensor.hacs') | float > 0  %}
                {% for repo in states.sensor.hacs.attributes.repositories -%}
                {{ repo.display_name }} {{ repo["available_version"] }}<br>
                {% endfor %} 
          {%- else -%}
          {%- endif -%}
          
###### PERSONNES PRESENTES
          
      compteur_home:
        friendly_name: Compteur Personnes à la maison         
        value_template: >-
            {{states.person                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('state', 'eq', 'home') 
            | rejectattr('entity_id', 'search', 'person.nina')
            | rejectattr('entity_id', 'search', 'person.leane')
            | map(attribute='name') | list | count }}

      presents:
        friendly_name: Personnes à la maison         
        value_template: >-
            {% if states.sensor.compteur_home.state == "0" -%}
            Personne
            {%- else -%}
            {{states.person                                  
            | reject('in', ['undefined', 'unavailable'])
            | selectattr('state', 'eq', 'home') 
            | rejectattr('entity_id', 'search', 'person.nina')
            | rejectattr('entity_id', 'search', 'person.leane')
            |  map(attribute='name') | list | join(' , ')}}
            {%- endif -%}          
         
###### STATUT PERSON ET GPS POSITION

      alex_trajet:
        friendly_name: "Alex tps trajet"
        value_template: >-
          {% set km_domicile = states.sensor.alex_trajet_domicile.attributes.distance | round(1)  %}
          {% set km_travail = states.sensor.alex_trajet_travail.attributes.distance | round(1)  %}
          {% set route  = states.sensor.alex_trajet_domicile.attributes.route  %}
          {% if  is_state("person.alex", "home")  -%}
            {% if  is_state("sensor.date_jour", "Samedi") or is_state("sensor.date_jour", "Dimanche") or is_state("input_boolean.vacances", "on")-%}
            Aucun
            {% else %}
            {{ states.sensor.alex_trajet_travail.state }} min ({{km_travail}}km) jusqu'au travail
            {% endif %}
          {% elif  not is_state("person.alex", "home")  -%}
            {% if is_state("input_boolean.vacances", "on")-%}
            Aucun
            {% else %}
            {{ states.sensor.alex_trajet_domicile.state }} min ({{km_domicile}}km) jusqu'au domicile 
            {% endif %}
          {% endif %}

      aurel_trajet:
        friendly_name: "Aurel tps trajet"
        value_template: >-
          {% set km_domicile = states.sensor.aurel_trajet_domicile.attributes.distance | round(1)  %}
          {% set km_travail = states.sensor.aurel_trajet_travail.attributes.distance | round(1)  %}
          {% set route  = states.sensor.aurel_trajet_domicile.attributes.route  %}
          {% if  is_state("person.herve", "home")  -%}
            {% if  is_state("sensor.date_jour", "Samedi") or is_state("sensor.date_jour", "Dimanche") or is_state("input_boolean.vacances", "on")-%}
            Aucun
            {% else %}
            {{ states.sensor.aurel_trajet_travail.state }} min ({{km_travail}}km) jusqu'au travail
            {% endif %}
          {% elif  not is_state("person.herve", "home")  -%}
            {% if is_state("input_boolean.vacances", "on")-%}
            Aucun
            {% else %}
            {{ states.sensor.aurel_trajet_domicile.state }} min ({{km_domicile}}km) jusqu'au domicile 
            {% endif %}
          {% endif %}
          
      aurel_activite:
        friendly_name: Aurel activité          
        value_template: >-
          {% set activite = states('sensor.iphone_aurel_activity') %}
          {% set traduction = {'Unknown':'Mouvement', 'Stationary':'Stationnaire', 'Automotive':'Conduite', 'Walking':'Marche', 'Running':'Course', 'Cycling':'Vélo'} %}
          {{ traduction[activite] }}
          
      alex_activite:
        friendly_name: Alex activité          
        value_template: >-
          {% set activite = states('sensor.alex_iphone_activity_2') %}
          {% set traduction = {'Unknown':'Mouvement', 'Stationary':'Stationnaire', 'Automotive':'Conduite', 'Walking':'Marche', 'Running':'Course', 'Cycling':'Vélo'} %}
          {{ traduction[activite] }}
          
      alex_gps:
        friendly_name: Alex GPS 
        value_template: >-      
          {% if states.person.alex.state == "home" %}
            Maison           
          {% elif states.person.alex.state == "not_home" %}
            {{ states.sensor.alex_iphone_geocoded_location_2.attributes.Locality }}, {{ states.sensor.alex_iphone_geocoded_location_2.attributes.Name }}
          {%- else -%}
            {{ states.person.alex.state }}
          {%- endif %}

      alex_gps_simple:
        friendly_name: Alex GPS 
        value_template: >-      
          {% if states.person.alex.state == "home" %}
            Maison           
          {% elif states.person.alex.state == "not_home" %}
            {{ states.sensor.alex_iphone_geocoded_location_2.attributes.Locality }}
          {%- else -%}
            {{ states.person.alex.state }}
          {%- endif %}
          
      alex_gps_alexa:
        friendly_name: Alex GPS Alexa
        value_template: >-      
          {% if states.person.alex.state == "home" %}
            A la maison
          {% elif states.person.alex.state == "Travail" %}
            Au travail 
          {% elif states.person.alex.state == "Hopital" %}
            A l'Hôpital             
          {% elif states.person.alex.state == "Salle de sport" %}
            Au sport           
          {% elif states.person.alex.state == "Collège" %}
            Au collège 
          {% elif states.person.alex.state == "Lycée" %}
            Au Lycée 
          {% elif states.person.alex.state == "Complexe sportif" %}
            Au Complexe sportif  
          {% elif states.person.alex.state == "Atoll" %}
            A l'Atoll    
          {% elif states.person.alex.state == "Super U" %}
            Super U             
          {% elif states.person.alex.state == "not_home" %}
            à {{ states.sensor.alex_iphone_geocoded_location_2.attributes.Locality }}, {{ states.sensor.alex_iphone_geocoded_location_2.attributes.Thoroughfare }}
          {%- else -%}
            Absente
          {%- endif %}          

      aurel_gps:
        friendly_name: Aurel GPS
        value_template: >-      
          {% if states.person.herve.state == "home" %}
            Maison
          {% elif states.person.herve.state == "not_home" %}
            {{ states.sensor.iphone_aurel_geocoded_location.attributes.Locality }}, {{ states.sensor.iphone_aurel_geocoded_location.attributes.Name }}
          {%- else -%}
            {{ states.person.herve.state }}
          {%- endif %}     
 
      aurel_gps_simple:
        friendly_name: Aurel GPS
        value_template: >-      
          {% if states.person.herve.state == "home" %}
            Maison
          {% elif states.person.herve.state == "not_home" %}
            {{ states.sensor.iphone_aurel_geocoded_location.attributes.Locality }}
          {%- else -%}
            {{ states.person.herve.state }}
          {%- endif %}
          
      tom_gps:
        friendly_name: Tom GPS
        value_template: >-      
          {% if states.person.tom.state == "home" %}
            Maison
          {% elif states.person.tom.state == "not_home" %}
            Absent     
          {%- else -%}
            Absent
          {%- endif %}           
          
      aurel_heure:
        friendly_name: Aurel heure
        value_template: >-      
          {{ as_timestamp(states.person.herve.last_changed) | timestamp_custom("%d/%m à %Hh%M") }}
      alex_heure:    
        friendly_name: Alex heure
        value_template: >-      
          {{ as_timestamp(states.person.alex.last_changed) | timestamp_custom("%d/%m à %Hh%M") }}
      tom_heure:    
        friendly_name: Tom heure
        value_template: >-      
          {{ as_timestamp(states.person.tom.last_changed) | timestamp_custom("%d/%m à %Hh%M") }}
          
      aurel_duree:
        friendly_name: "Aurel duree"  
        value_template: >-        
          {%- set time = (as_timestamp(now()) - as_timestamp(states.person.herve.last_changed)) | int  %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set minutes = '{}min'.format(minutes) if minutes > 0 else '0min' %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set hours = '{}h '.format(hours) if hours > 0 else '0h ' %}
          {%- set days = (time // 86400) %}
          {%- set days = '{}j '.format(days) if days > 0 else '' %}
          {%- if time < 60 %}
          - de 1min 
          {%- elif time > 86400 %}
          {{ days + hours }}
          {%- else -%}
          {{ days + hours + minutes}}
          {%- endif -%}
          
      alex_duree:
        friendly_name: "Alex duree"
        value_template: >-
          {%- set time = (as_timestamp(now()) - as_timestamp(states.person.alex.last_changed)) | int  %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set minutes = '{}min'.format(minutes) if minutes > 0 else '0min' %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set hours = '{}h '.format(hours) if hours > 0 else '0h ' %}
          {%- set days = (time // 86400) %}
          {%- set days = '{}j '.format(days) if days > 0 else '' %}
          {%- if time < 60 %}
          - de 1min 
          {%- elif time > 86400 %}
          {{ days + hours }}
          {%- else -%}
          {{ days + hours + minutes}}
          {%- endif -%}
          
      tom_duree:
        friendly_name: "tom duree"
        value_template: >-
          {%- set time = (as_timestamp(now()) - as_timestamp(states.person.tom.last_changed)) | int  %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set minutes = '{}min'.format(minutes) if minutes > 0 else '0min' %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set hours = '{}h '.format(hours) if hours > 0 else '0h ' %}
          {%- set days = (time // 86400) %}
          {%- set days = '{}j '.format(days) if days > 0 else '' %}
          {%- if time < 60 %}
          - de 1min 
          {%- elif time > 86400 %}
          {{ days + hours }}
          {%- else -%}
          {{ days + hours + minutes}}
          {%- endif -%}
          
      manon_gps:
        friendly_name: Manon GPS
        value_template: >-      
          {% if states.person.manon.state == "home" %}
            Maison
          {% elif states.person.manon.state == "not_home" %}
            Absent     
          {%- else -%}
            Absent
          {%- endif %}
          
      manon_duree:
        friendly_name: "manon duree"
        value_template: >-
          {%- set time = (as_timestamp(now()) - as_timestamp(states.person.manon.last_changed)) | int  %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set minutes = '{}min'.format(minutes) if minutes > 0 else '0min' %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set hours = '{}h '.format(hours) if hours > 0 else '0h ' %}
          {%- set days = (time // 86400) %}
          {%- set days = '{}j '.format(days) if days > 0 else '' %}
          {%- if time < 60 %}
          - de 1min 
          {%- elif time > 86400 %}
          {{ days + hours }}
          {%- else -%}
          {{ days + hours + minutes}}
          {%- endif -%}
          
      leane_duree:
        friendly_name: "leane duree"
        value_template: >-
          {%- set time = (as_timestamp(now()) - as_timestamp(states.person.leane.last_changed)) | int  %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set minutes = '{}min'.format(minutes) if minutes > 0 else '0min' %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set hours = '{}h '.format(hours) if hours > 0 else '0h ' %}
          {%- set days = (time // 86400) %}
          {%- set days = '{}j '.format(days) if days > 0 else '' %}
          {%- if time < 60 %}
          - de 1min 
          {%- elif time > 86400 %}
          {{ days + hours }}
          {%- else -%}
          {{ days + hours + minutes}}
          {%- endif -%}
          
      nina_duree:
        friendly_name: "nina duree"
        value_template: >-
          {%- set time = (as_timestamp(now()) - as_timestamp(states.person.nina.last_changed)) | int  %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set minutes = '{}min'.format(minutes) if minutes > 0 else '0min' %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set hours = '{}h '.format(hours) if hours > 0 else '0h ' %}
          {%- set days = (time // 86400) %}
          {%- set days = '{}j '.format(days) if days > 0 else '' %}
          {%- if time < 60 %}
          - de 1min 
          {%- elif time > 86400 %}
          {{ days + hours }}
          {%- else -%}
          {{ days + hours + minutes}}
          {%- endif -%}

##############################
#Sensor Date et heure 
##############################
  - platform: time_date
    display_options:
      - 'time'
      - 'date' 
